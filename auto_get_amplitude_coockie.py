import json
import os
import time
import hashlib
import random
from playwright.sync_api import sync_playwright


def load_cookies(filepath="cookies.json"):
    """–ó–∞–≥—Ä—É–∑–∫–∞ cookies —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏"""
    if not os.path.exists(filepath):
        print("‚ùå –§–∞–π–ª cookies.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []

    with open(filepath, "r") as f:
        cookies = json.load(f)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∏ –ª–∏ cookies
    current_time = time.time()
    valid_cookies = []

    for cookie in cookies:
        if 'expires' in cookie:
            if cookie['expires'] > current_time:
                valid_cookies.append(cookie)
            else:
                print(f"‚ö†Ô∏è Cookie {cookie.get('name', 'unknown')} –∏—Å—Ç–µ–∫")
        else:
            valid_cookies.append(cookie)

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(valid_cookies)} –≤–∞–ª–∏–¥–Ω—ã—Ö cookies")
    return valid_cookies


def save_cookies(page, filepath="cookies_new.json"):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö cookies"""
    try:
        cookies = page.context.cookies()
        with open(filepath, "w") as f:
            json.dump(cookies, f, indent=2)
        print(f"‚úÖ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filepath}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies: {e}")
        return False


def create_stealth_browser(p):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏"""
    browser_args = [
        '--no-proxy-server',
        '--disable-proxy-config-service',
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-blink-features=AutomationControlled',
        '--exclude-switches=enable-automation',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
        '--disable-dev-shm-usage',
        '--disable-background-timer-throttling',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding',
        '--disable-ipc-flooding-protection',
        '--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
    ]

    browser = p.chromium.launch(
        headless=False,
        args=browser_args,
        slow_mo=random.randint(50, 150)  # –ó–∞–º–µ–¥–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    )

    context = browser.new_context(
        proxy=None,
        user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        viewport={'width': 1920, 'height': 1080},
        locale='en-US',
        timezone_id='America/New_York',
        extra_http_headers={
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
    )

    # –ë–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
    context.add_init_script("""
        // –£–¥–∞–ª—è–µ–º webdriver property
        Object.defineProperty(navigator, 'webdriver', {
            get: () => undefined,
        });

        // –ú–∞—Å–∫–∏—Ä—É–µ–º chrome object
        window.chrome = {
            runtime: {},
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ navigator
        Object.defineProperty(navigator, 'plugins', {
            get: () => [1, 2, 3, 4, 5],
        });

        // –ú–∞—Å–∫–∏—Ä—É–µ–º permissions
        const originalQuery = window.navigator.permissions.query;
        window.navigator.permissions.query = (parameters) => (
            parameters.name === 'notifications' ?
                Promise.resolve({ state: Notification.permission }) :
                originalQuery(parameters)
        );

        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        const getParameter = WebGLRenderingContext.getParameter;
        WebGLRenderingContext.prototype.getParameter = function(parameter) {
            if (parameter === 37445) {
                return 'Intel Inc.';
            }
            if (parameter === 37446) {
                return 'Intel Iris OpenGL Engine';
            }
            return getParameter(parameter);
        };
    """)

    return browser, context


def enhanced_human_behavior(page):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    try:
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –ø–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        for _ in range(random.randint(1, 3)):
            x = random.randint(100, 1200)
            y = random.randint(100, 800)
            page.mouse.move(x, y, steps=random.randint(5, 15))
            time.sleep(random.uniform(0.1, 0.3))

        # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—ã, –∫–∞–∫ –±—É–¥—Ç–æ —á–∏—Ç–∞–µ–º
        if random.random() < 0.4:
            time.sleep(random.uniform(1, 3))

        # –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–Ω–∏–µ
        if random.random() < 0.3:
            scroll_amount = random.randint(-200, 500)
            page.evaluate(f"window.scrollBy(0, {scroll_amount})")
            time.sleep(random.uniform(0.5, 1.5))

        # –ò–Ω–æ–≥–¥–∞ –∫–ª–∏–∫–∞–µ–º –≤ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ (–∫–∞–∫ –±—É–¥—Ç–æ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è)
        if random.random() < 0.2:
            safe_x = random.randint(400, 800)
            safe_y = random.randint(200, 400)
            page.mouse.click(safe_x, safe_y)
            time.sleep(random.uniform(0.2, 0.5))

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {e}")


def check_page_health(page):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–≤–µ—á–∞–µ—Ç
        page.evaluate("1 + 1")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        current_url = page.url
        if "amplitude.com" not in current_url:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π URL: {current_url}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
        login_selectors = [
            'input[type="email"]',
            'input[type="password"]',
            'text=Sign in',
            'text=Log in'
        ]

        for selector in login_selectors:
            if page.query_selector(selector):
                print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
                return False

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return False


def handle_authorization(page):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    print("1. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤—Ä—É—á–Ω—É—é –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ")
    print("2. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Amplitude")
    print("3. –ù–∞–∂–º–∏—Ç–µ Enter –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")

    input("‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ cookies
    if save_cookies(page):
        print("‚úÖ –ù–æ–≤—ã–µ cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    return check_page_health(page)


class EnhancedAntiBlockingProtection:
    """–£—Å–∏–ª–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""

    def __init__(self, settings):
        self.settings = settings
        self.consecutive_errors = 0
        self.max_consecutive_errors = 3  # –°–Ω–∏–∂–∞–µ–º –ª–∏–º–∏—Ç
        self.total_requests = 0
        self.session_start_time = time.time()
        self.last_success_time = time.time()

    def should_recreate_browser(self):
        """–ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä"""
        session_time = time.time() - self.session_start_time
        time_since_success = time.time() - self.last_success_time

        return (self.consecutive_errors >= 2 or
                session_time > 1800 or  # 30 –º–∏–Ω—É—Ç
                time_since_success > 300)  # 5 –º–∏–Ω—É—Ç –±–µ–∑ —É—Å–ø–µ—Ö–∞

    def should_take_long_break(self):
        """–ù—É–∂–Ω–∞ –ª–∏ –¥–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞"""
        return self.consecutive_errors >= 2

    def should_stop(self):
        """–ù—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è"""
        return self.consecutive_errors >= self.max_consecutive_errors

    def on_success(self):
        """–£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        self.consecutive_errors = 0
        self.total_requests += 1
        self.last_success_time = time.time()

    def on_error(self):
        """–û—à–∏–±–∫–∞"""
        self.consecutive_errors += 1
        self.total_requests += 1

    def get_delay(self):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞"""
        base_delay = random.uniform(
            self.settings['min_delay'],
            self.settings['max_delay']
        )

        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        if self.consecutive_errors > 0:
            multiplier = 2 ** self.consecutive_errors
            base_delay *= multiplier

        return min(base_delay, 30)  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥

    def get_long_break_time(self):
        """–î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö"""
        return random.uniform(60, 180)  # 1-3 –º–∏–Ω—É—Ç—ã


def safe_screenshot(element, path, description):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    try:
        if not element:
            print(f"‚ö†Ô∏è {description} - —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
        if not element.is_visible():
            print(f"‚ö†Ô∏è {description} - —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –≤–∏–¥–∏–º")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        bbox = element.bounding_box()
        if not bbox or bbox['width'] < 50 or bbox['height'] < 50:
            print(f"‚ö†Ô∏è {description} - —ç–ª–µ–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π")
            return None

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        os.makedirs(os.path.dirname(path), exist_ok=True)

        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        element.screenshot(path=path)
        print(f"‚úÖ {description} —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        return path

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ {description}: {e}")
        return None


def main():
    print("üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô –°–ë–û–†–©–ò–ö –°–ö–†–ò–ù–®–û–¢–û–í SESSION REPLAY")
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    cookies = load_cookies()
    if not cookies:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª cookies.json")
        return

    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ URLs –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ)

    all_urls = load_urls()
    processed_urls = load_processed_urls()
    unprocessed_urls = [url for url in all_urls if url not in processed_urls]

    if not unprocessed_urls:
        print("üéâ –í—Å–µ URL —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        return

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    count_to_process = min(10, len(unprocessed_urls))  # –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞–ª–æ–≥–æ
    urls_to_process = unprocessed_urls[:count_to_process]

    safety_settings = {
        'min_delay': 5,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
        'max_delay': 10,
        'batch_size': 5,  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        'batch_pause_min': 30,
        'batch_pause_max': 60,
        'name': '–û–°–¢–û–†–û–ñ–ù–´–ô'
    }

    print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {len(urls_to_process)} URL")
    print(f"üõ°Ô∏è –†–µ–∂–∏–º: {safety_settings['name']}")

    results = []
    start_time = time.time()
    protection = EnhancedAntiBlockingProtection(safety_settings)
    browser = None
    context = None
    page = None

    try:
        with sync_playwright() as p:
            for i, url in enumerate(urls_to_process, 1):
                print(f"\n‚ñ∂Ô∏è [{i}/{len(urls_to_process)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL...")

                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                if (not browser or not page or
                        protection.should_recreate_browser()):

                    if browser:
                        print("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
                        browser.close()
                        time.sleep(random.uniform(5, 10))

                    browser, context = create_stealth_browser(p)
                    context.add_cookies(cookies)
                    page = context.new_page()
                    protection.session_start_time = time.time()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                if protection.should_stop():
                    print("üõë –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫!")
                    break

                # –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
                if protection.should_take_long_break():
                    long_break = protection.get_long_break_time()
                    print(f"‚è∏Ô∏è –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞: {long_break:.1f} —Å–µ–∫...")
                    time.sleep(long_break)

                try:
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                    enhanced_human_behavior(page)

                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    response = page.goto(url, timeout=45000, wait_until="domcontentloaded")

                    if not response or response.status >= 400:
                        print(f"‚ùå –ü–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status if response else 'None'}")
                        protection.on_error()
                        continue

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    time.sleep(random.uniform(3, 6))

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    if not check_page_health(page):
                        if "amplitude.com/login" in page.url or page.query_selector('input[type="email"]'):
                            if not handle_authorization(page):
                                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                                break
                        else:
                            print("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                            protection.on_error()
                            continue

                    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...
                    # (—Ä–∞–±–æ—Ç–∞ —Å Summary, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ —Ç.–¥.)

                    session_id = get_session_id_from_url(url)
                    print(f"üìã Session ID: {session_id}")

                    protection.on_success()
                    save_processed_url(url)

                except Exception as e:
                    error_msg = str(e)
                    print(f"‚ùå –û—à–∏–±–∫–∞: {error_msg[:100]}...")
                    protection.on_error()
                    save_processed_url(url)  # –ß—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–º URL

                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                if i < len(urls_to_process):
                    delay = protection.get_delay()
                    print(f"‚è±Ô∏è –ü–∞—É–∑–∞ {delay:.1f} —Å–µ–∫...")
                    time.sleep(delay)

    finally:
        if browser:
            browser.close()

    print("\n" + "=" * 60)
    print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("üí° –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –º–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL")


# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
def load_urls(filepath="urls.txt"):
    """–ó–∞–≥—Ä—É–∑–∫–∞ URLs —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫"""
    with open(filepath, "r") as f:
        urls = []
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and line.startswith('http'):
                urls.append(line)
        return urls


def load_processed_urls(filepath="processed_urls.txt"):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö URL"""
    if os.path.exists(filepath):
        with open(filepath, "r") as f:
            return set(line.strip() for line in f if line.strip())
    return set()


def save_processed_url(url, filepath="processed_urls.txt"):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ URL"""
    with open(filepath, "a") as f:
        f.write(url + "\n")


def get_session_id_from_url(url):
    url_hash = hashlib.md5(url.encode()).hexdigest()[:8]
    if "sessionReplayId=" in url:
        parts = url.split("sessionReplayId=")[1].split("&")[0].split("/")
        session_replay_id = parts[0]
        session_start_time = parts[1] if len(parts) > 1 else "unknown"
        return f"{session_replay_id}_{session_start_time}_{url_hash}"
    return f"no_session_id_{url_hash}"


if __name__ == "__main__":
    main()