from fastapi import FastAPI, BackgroundTasks, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import schedule
import time
import threading
import logging
import os
from datetime import datetime
import pytz
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑ –ø–∞–ø–∫–∏ app
from app.endpoints import router
from app.state import task_statuses
from app.endpoints import run_script_safe

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

scheduler_running = True
moscow_tz = pytz.timezone("Europe/Moscow")

def run_daily_analytics_pipeline():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–û–†–Ø–î–û–ö –ü–ê–ô–ü–õ–ê–ô–ù–ê ---
    pipeline_steps = [
        ("scripts/collect_links.py", "–°–±–æ—Ä Session Replay —Å—Å—ã–ª–æ–∫"),
        ("scripts/extract_text.py", "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ OCR"),
        ("scripts/clustering_analysis.py", "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑"),
        ("scripts/replay_screenshots.py", "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"), # –≠—Ç–æ—Ç —à–∞–≥ —Ç–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ–¥–Ω–∏–π
    ]
    # ----------------------------------------
    
    for script_path, step_name in pipeline_steps:
        logger.info(f"üìù –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ø: {step_name}")
        result = run_script_safe(script_path, step_name)
        if result["status"] != "success":
            logger.error(f"‚ùå –≠—Ç–∞–ø {step_name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π, –ø–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            break
        logger.info(f"‚úÖ –≠—Ç–∞–ø {step_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
    while scheduler_running:
        schedule.run_pending()
        time.sleep(60)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    schedule.every().day.at("06:00").do(run_daily_analytics_pipeline)
    
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    
    logger.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    yield
    
    global scheduler_running
    scheduler_running = False
    logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

app = FastAPI(
    title="üìä Analytics Scripts API",
    description="–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤.",
    version="1.3.0", # –û–±–Ω–æ–≤–∏–º –≤–µ—Ä—Å–∏—é
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"])
app.include_router(router, prefix="/api")

@app.get("/api/task-status/{task_id}", tags=["üìä Monitoring"])
async def get_task_status(task_id: str):
    status = task_statuses.get(task_id)
    if not status:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return status

@app.get("/", tags=["üìç General"])
async def root():
    return {"service": "Analytics Scripts API", "status": "running", "version": "1.3.0"}
