from fastapi import FastAPI, BackgroundTasks, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import schedule
import time
import threading
import logging
import os
from datetime import datetime
import pytz
from typing import Dict, Any

from app.endpoints import router
from app.state import task_statuses
from app.endpoints import run_script_safe

from app.endpoints import run_screenshot_task, run_ocr_task, run_clustering_task
from scripts.collect_links import main as run_collect_links_main

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

scheduler_running = True
moscow_tz = pytz.timezone("Europe/Moscow")

def run_daily_analytics_pipeline():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")

    try:
        # --- –®–ê–ì 1: –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ ---
        logger.info("üìù –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ø: –°–±–æ—Ä Session Replay —Å—Å—ã–ª–æ–∫")
        result_links = run_collect_links_main()
        if result_links.get("status") != "success":
            logger.error(f"‚ùå –≠—Ç–∞–ø '–°–±–æ—Ä —Å—Å—ã–ª–æ–∫' –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {result_links.get('error')}. –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        logger.info(f"‚úÖ –≠—Ç–∞–ø '–°–±–æ—Ä —Å—Å—ã–ª–æ–∫' –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ. –°–æ–±—Ä–∞–Ω–æ URL: {result_links.get('collected_urls', 0)}")

        # --- –®–ê–ì 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ OCR ---
        # –≠—Ç–æ—Ç —à–∞–≥ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∫ –∑–∞–¥–∞—á–∞, –Ω–æ –º—ã –∂–¥–µ–º –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞, –º—ã –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é.
        logger.info("üìù –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ø: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ OCR")
        from scripts.extract_text import TextExtractionProcessor
        ocr_processor = TextExtractionProcessor()
        result_ocr = ocr_processor.run()
        if result_ocr.get("status") != "completed":
             logger.error(f"‚ùå –≠—Ç–∞–ø '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ OCR' –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π. –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
             return
        logger.info(f"‚úÖ –≠—Ç–∞–ø '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ OCR' –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result_ocr.get('total_processed', 0)}")


        # --- –®–ê–ì 3: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ ---
        logger.info("üìù –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ø: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑")
        from scripts.clustering_analysis import ClusteringAnalysisProcessor
        clustering_processor = ClusteringAnalysisProcessor()
        result_clustering = clustering_processor.run()
        if result_clustering.get("status") != "completed":
            logger.error(f"‚ùå –≠—Ç–∞–ø '–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è' –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π. –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return
        logger.info(f"‚úÖ –≠—Ç–∞–ø '–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è' –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result_clustering.get('total_processed', 0)}")

        # --- –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (—Å–∞–º—ã–π –¥–æ–ª–≥–∏–π) ---
        # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, –Ω–æ –Ω–∞–ø—Ä—è–º—É—é
        logger.info("üìù –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ø: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
        from scripts.replay_screenshots import RenderScreenshotCollector
        screenshot_collector = RenderScreenshotCollector()
        result_screenshots = screenshot_collector.run()
        # –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ª–≥–æ, –∫–∞–∫ –∏ –∑–∞–¥—É–º–∞–Ω–æ
        logger.info(f"‚úÖ –≠—Ç–∞–ø '–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤' –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_screenshots}")

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}", exc_info=True)

def run_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
    while scheduler_running:
        schedule.run_pending()
        time.sleep(60)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    schedule.every().day.at("06:00").do(run_daily_analytics_pipeline)
    
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    
    logger.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    yield
    
    global scheduler_running
    scheduler_running = False
    logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

app = FastAPI(
    title="üìä Analytics Scripts API",
    description="–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤.",
    version="1.3.0", # –û–±–Ω–æ–≤–∏–º –≤–µ—Ä—Å–∏—é
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"])
app.include_router(router, prefix="/api")

@app.get("/api/task-status/{task_id}", tags=["üìä Monitoring"])
async def get_task_status(task_id: str):
    status = task_statuses.get(task_id)
    if not status:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return status

@app.get("/", tags=["üìç General"])
async def root():
    return {"service": "Analytics Scripts API", "status": "running", "version": "1.3.0"}
