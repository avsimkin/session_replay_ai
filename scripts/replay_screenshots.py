import json
import os
import time
import hashlib
import random
import sys
from datetime import datetime
from playwright.sync_api import sync_playwright, Error as PlaywrightError, TimeoutError as PlaywrightTimeoutError
import tempfile
import shutil
from typing import Callable, Optional

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google API
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ config
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
try:
    from config.settings import settings
except ImportError:
    class MockSettings:
        GOOGLE_APPLICATION_CREDENTIALS = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS', '/etc/secrets/bigquery-credentials.json')
        GDRIVE_FOLDER_ID = os.environ.get('GDRIVE_FOLDER_ID', '1K8cbFU2gYpvP3PiHwOOHS1KREqdj6fQX')
    settings = MockSettings()

USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0"
]

TEST_URLS = [
    'https://app.amplitude.com/analytics/rn/session-replay/project/258068/search/amplitude_id%3D1247117195850?sessionReplayId=b04f4dad-3dea-4249-b9fe-78b689c822a5/1749812689447&sessionStartTime=1749812689447',
    'https://app.amplitude.com/analytics/rn/session-replay/project/258068/search/amplitude_id%3D1247144093674?sessionReplayId=09d7d9ec-9d2f-453b-83f5-5b403e45c202/1749823352686&sessionStartTime=1749823352686',
    'https://app.amplitude.com/analytics/rn/session-replay/project/258068/search/amplitude_id%3D868026320025?sessionReplayId=03e5a484-6f63-4fb2-8964-2893e062ea27/1749825242509&sessionStartTime=1749825242509'
]

class RenderScreenshotCollector:
    def __init__(self, status_callback: Optional[Callable[[str, int], None]] = None):
        self.status_callback = status_callback
        self.credentials_path = settings.GOOGLE_APPLICATION_CREDENTIALS
        self.gdrive_folder_id = settings.GDRIVE_FOLDER_ID
        
        self._update_status("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...", 1)
        self.cookies = self._load_cookies_from_secret_file()
        self._init_google_drive()

    def _update_status(self, details: str, progress: int):
        if self.status_callback: 
            self.status_callback(details, progress)
        if progress != -1: 
            print(f"[{progress}%] {details}")

    def _load_cookies_from_secret_file(self):
        secret_file_path = "/etc/secrets/cookies.json"
        self._update_status(f"–ó–∞–≥—Ä—É–∑–∫–∞ cookies –∏–∑ {secret_file_path}...", 2)
        if not os.path.exists(secret_file_path):
            self._update_status(f"‚ùå –§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω!", 2)
            return []
        try:
            with open(secret_file_path, 'r') as f: 
                cookies = json.load(f)
            self._update_status(f"‚úÖ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({len(cookies)} —à—Ç).", 2)
            return cookies
        except Exception as e:
            self._update_status(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cookies: {e}", 2)
            return []

    def _init_google_drive(self):
        try:
            credentials = service_account.Credentials.from_service_account_file(
                self.credentials_path, 
                scopes=['https://www.googleapis.com/auth/drive']
            )
            self.drive_service = build('drive', 'v3', credentials=credentials)
            self._update_status("Google Drive –ø–æ–¥–∫–ª—é—á–µ–Ω", 4)
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Drive: {e}")

    def get_session_id_from_url(self, url):
        url_hash = hashlib.md5(url.encode()).hexdigest()[:8]
        if "sessionReplayId=" in url:
            parts = url.split("sessionReplayId=")[1].split("&")[0].split("/")
            session_replay_id = parts[0]
            session_start_time = parts[1] if len(parts) > 1 else "unknown"
            return f"{session_replay_id}_{session_start_time}_{url_hash}"
        return f"no_session_id_{url_hash}"

    def wait_for_content(self, page, selector, bad_texts=("Loading", "Loading summary"), timeout=10, min_text_length=10):
        """
        –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –¥–æ–ª—å—à–µ timeout —Å–µ–∫—É–Ω–¥.
        –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫, –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫.
        –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏–ª—Å—è –≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç.
        """
        self._update_status(f"‚è≥ –ñ–¥–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç (—Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}, —Ç–∞–π–º–∞—É—Ç: {timeout}—Å)...", -1)
        start = time.time()
        last_log = 0
        
        while True:
            el = page.query_selector(selector)
            if el:
                txt = el.inner_text().strip()
                if txt and all(bad not in txt for bad in bad_texts) and len(txt) >= min_text_length:
                    self._update_status(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ {time.time() - start:.1f} —Å–µ–∫", -1)
                    return el
            
            elapsed = time.time() - start
            if elapsed - last_log >= 3:
                self._update_status(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... {elapsed:.1f}/{timeout} —Å–µ–∫", -1)
                last_log = elapsed
                
            if elapsed > timeout:
                self._update_status(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ({selector})", -1)
                return None
            time.sleep(0.5)

    def simulate_human_behavior(self, page):
        self._update_status("–ò–º–∏—Ç–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", -1)
        try:
            # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
            for _ in range(random.randint(2, 4)):
                x = random.randint(200, 1200)
                y = random.randint(200, 700)
                page.mouse.move(x, y, steps=random.randint(5, 15))
                time.sleep(random.uniform(0.1, 0.3))
            
            # –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
            if random.random() < 0.4:
                scroll_amount = random.randint(100, 500)
                direction = random.choice([1, -1])
                page.evaluate(f"window.scrollBy(0, {scroll_amount * direction})")
                time.sleep(random.uniform(0.5, 1.5))
                
            # –°–ª—É—á–∞–π–Ω—ã–π –∫–ª–∏–∫ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω–µ
            if random.random() < 0.2:
                safe_x = random.randint(50, 1300)
                safe_y = random.randint(50, 150)
                page.mouse.click(safe_x, safe_y)
                time.sleep(random.uniform(0.3, 0.8))
                
            # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ Tab
            if random.random() < 0.3:
                page.keyboard.press('Tab')
                time.sleep(random.uniform(0.2, 0.5))
        except Exception as e:
            self._update_status(f"–ù–µ–±–æ–ª—å—à–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏: {e}", -1)

    def screenshot_summary_flexible(self, page, session_id, base_dir, summary_el=None):
        self._update_status("üìÑ –ò—â–µ–º Summary –±–ª–æ–∫...", -1)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –∏—â–µ–º
        el = summary_el
        if not el:
            el = self.wait_for_content(page, 'p.ltext-_uoww22', timeout=3)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if el:
            text_content = el.inner_text().strip()
            if len(text_content) > 20:
                self._update_status(f"‚úÖ Summary –∑–∞–≥—Ä—É–∂–µ–Ω (–¥–ª–∏–Ω–∞: {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤)", -1)
            else:
                self._update_status(f"‚ö†Ô∏è Summary —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤), –ø—Ä–æ–±—É–µ–º fallback", -1)
                el = None

        # Fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        if not el:
            self._update_status("‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Summary...", -1)
            fallback_selectors = [
                'div[style*="min-width: 460px"]',
                '.ltext-_uoww22',
                'div:has-text("Summary")',
                'p:has-text("The user")',
                'p:has-text("session")'
            ]
            
            for selector in fallback_selectors:
                try:
                    el = page.query_selector(selector)
                    if el:
                        text = el.inner_text().strip()
                        if text and len(text) > 20 and "Loading" not in text:
                            self._update_status(f"‚úÖ Fallback —Å—Ä–∞–±–æ—Ç–∞–ª —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}", -1)
                            break
                        else:
                            el = None
                except Exception:
                    continue
                    
            if not el:
                self._update_status("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Summary –±–ª–æ–∫ –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º", -1)
                return None

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        try:
            img_name = os.path.join(base_dir, f"{session_id}_summary.png")
            el.screenshot(path=img_name)
            self._update_status("‚úÖ Summary —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω", -1)
            return img_name
        except Exception as e:
            self._update_status(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Summary: {e}", -1)
            return None

    def screenshot_by_title(self, page, block_title, session_id, base_dir):
        self._update_status(f"üîç –ò—â–µ–º –±–ª–æ–∫ '{block_title}'...", -1)
        el = None
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        search_selectors = [
            f'h4:has-text("{block_title}")',
            f'div:has-text("{block_title}")',
            f'span:has-text("{block_title}")',
            f'h3:has-text("{block_title}")',
            f'h5:has-text("{block_title}")',
            f'[title="{block_title}"]',
            f'[aria-label="{block_title}"]'
        ]
        
        # –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        for selector in search_selectors:
            try:
                maybe = page.query_selector(selector)
                if maybe:
                    self._update_status(f"üìç –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å '{block_title}' —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}", -1)
                    
                    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    parent = maybe
                    for level in range(6):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ 6 —É—Ä–æ–≤–Ω–µ–π –≤–≤–µ—Ä—Ö
                        try:
                            bbox = parent.bounding_box()
                            if bbox and bbox['height'] > 60 and bbox['width'] > 200:
                                text_content = parent.inner_text().strip()
                                if text_content and len(text_content) > 10:
                                    el = parent
                                    self._update_status(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ —É—Ä–æ–≤–Ω–µ {level}", -1)
                                    break
                        except Exception:
                            pass
                        
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                        try:
                            parent = parent.evaluate_handle('el => el.parentElement').as_element()
                            if not parent:
                                break
                        except Exception:
                            break
                    
                    if el:
                        break
            except Exception as e:
                continue

        # Fallback –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if not el:
            self._update_status(f"üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É '{block_title}'...", -1)
            try:
                all_elements = page.query_selector_all('div, span, h1, h2, h3, h4, h5, h6')
                for element in all_elements:
                    try:
                        text = element.inner_text().strip()
                        if block_title.lower() in text.lower() and len(text) < 100:
                            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                            parent = element
                            for _ in range(4):
                                try:
                                    parent = parent.evaluate_handle('el => el.parentElement').as_element()
                                    if parent:
                                        bbox = parent.bounding_box()
                                        parent_text = parent.inner_text().strip()
                                        if (bbox and bbox['height'] > 60 and 
                                            len(parent_text) > len(text) and len(parent_text) < 1000):
                                            el = parent
                                            self._update_status(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É", -1)
                                            break
                                except Exception:
                                    break
                            if el:
                                break
                    except Exception:
                        continue
            except Exception:
                pass

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
        if el:
            content_loaded = False
            self._update_status(f"‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–ª–æ–∫–∞ '{block_title}'...", -1)
            
            for attempt in range(30):  # 15 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                try:
                    txt = el.inner_text().strip()
                    if txt and "Loading" not in txt and len(txt) > 10:
                        content_loaded = True
                        self._update_status(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –±–ª–æ–∫–∞ '{block_title}' –∑–∞–≥—Ä—É–∂–µ–Ω", -1)
                        break
                except Exception:
                    pass
                time.sleep(0.5)
            
            if not content_loaded:
                self._update_status(f"‚ö†Ô∏è {block_title} ‚Äî –ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏, —Å–∫—Ä–∏–Ω—é –∫–∞–∫ –µ—Å—Ç—å", -1)
        else:
            self._update_status(f"‚ùå –ë–ª–æ–∫ '{block_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω!", -1)
            return None

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        try:
            img_path = os.path.join(base_dir, f"{session_id}_{block_title.lower()}.png")
            el.screenshot(path=img_path)
            self._update_status(f"‚úÖ {block_title} —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω", -1)
            return img_path
        except Exception as e:
            self._update_status(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ {block_title}: {e}", -1)
            return None

    def screenshot_userinfo_block(self, page, session_id, base_dir):
        self._update_status("üîç –ò—â–µ–º –±–ª–æ–∫ User Info...", -1)
        userinfo_div = None
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ CSS –∫–ª–∞—Å—Å—É
        try:
            css_selector = '.cerulean-cardbase.cerulean-alpha-general-card'
            elements = page.query_selector_all(css_selector)
            
            for element in elements:
                try:
                    text = element.inner_text().strip()
                    bbox = element.bounding_box()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è user info –±–ª–æ–∫–∞
                    if (bbox and 
                        bbox['y'] < 400 and  # –ë–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
                        text and 
                        len(text) > 10 and len(text) < 500 and
                        (any(char.isdigit() for char in text) or  # –ï—Å—Ç—å —Ü–∏—Ñ—Ä—ã
                         any(country in text for country in ["Spain", "Peru", "Bolivia", "Ecuador", 
                                                            "Netherlands", "Costa Rica", "Russia"]))):  # –ò–ª–∏ —Å—Ç—Ä–∞–Ω—ã
                        userinfo_div = element
                        break
                except Exception:
                    continue
        except Exception:
            pass

        # Fallback –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if not userinfo_div:
            try:
                session_selectors = [
                    'text=Session Length',
                    'text=Event Total', 
                    'text=Device Type'
                ]
                
                for selector in session_selectors:
                    element = page.query_selector(selector)
                    if element:
                        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                        parent = element
                        for _ in range(5):
                            try:
                                parent = parent.evaluate_handle('el => el.parentElement').as_element()
                                if parent:
                                    bbox = parent.bounding_box()
                                    text = parent.inner_text().strip()
                                    if (bbox and bbox['y'] < 400 and 
                                        bbox['width'] > 200 and bbox['height'] > 80 and
                                        len(text) > 20 and len(text) < 500):
                                        userinfo_div = parent
                                        break
                            except Exception:
                                break
                        if userinfo_div:
                            break
            except Exception:
                pass

        if not userinfo_div:
            self._update_status("‚ö†Ô∏è User info –Ω–µ –Ω–∞–π–¥–µ–Ω", -1)
            return None

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        try:
            img_path = os.path.join(base_dir, f"{session_id}_userinfo.png")
            userinfo_div.screenshot(path=img_path)
            self._update_status("‚úÖ User info —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω", -1)
            return img_path
        except Exception:
            self._update_status("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ user info", -1)
            return None

    def create_session_folder_structure(self, session_id, screenshots, url_data):
        session_dir = tempfile.mkdtemp(prefix=f"session_folder_{session_id}_")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ –ø–∞–ø–∫—É —Å–µ—Å—Å–∏–∏
        for screenshot_path in screenshots:
            if screenshot_path and os.path.exists(screenshot_path):
                shutil.copy2(screenshot_path, session_dir)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "session_id": session_id,
            "url": url_data.get('session_replay_url'),
            "processed_at": datetime.now().isoformat(),
            "screenshots": [os.path.basename(p) for p in screenshots if p and os.path.exists(p)]
        }
        
        with open(os.path.join(session_dir, "metadata.json"), 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, default=str)
            
        return session_dir

    def create_and_upload_archive(self, session_dir, session_id, is_failure=False):
        archive_path = None
        try:
            prefix = "FAILURE" if is_failure else "session_replay"
            archive_name_base = f"{prefix}_{session_id}"
            archive_path = shutil.make_archive(archive_name_base, 'zip', session_dir)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Google Drive
            file_metadata = {
                'name': os.path.basename(archive_path),
                'parents': [self.gdrive_folder_id]
            }
            media = MediaFileUpload(archive_path, resumable=True)
            uploaded_file = self.drive_service.files().create(
                body=file_metadata, 
                media_body=media, 
                fields='id, name'
            ).execute()
            
            self._update_status(f"‚òÅÔ∏è –ê—Ä—Ö–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω. ID: {uploaded_file.get('id')}", -1)
            return uploaded_file
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if archive_path and os.path.exists(archive_path):
                os.remove(archive_path)

    def process_single_url(self, page, url_data):
        url = url_data['session_replay_url']
        session_id = self.get_session_id_from_url(url)
        temp_screenshots_dir = tempfile.mkdtemp(prefix=f"screenshots_{session_id}_")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏
        REQUIRED_BLOCKS = ['userinfo', 'summary', 'sentiment']
        OPTIONAL_BLOCKS = ['actions']

        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.simulate_human_behavior(page)
            page.goto(url, timeout=90000, wait_until="networkidle")
            time.sleep(random.uniform(3, 5))
            
            # –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É Summary
            summary_tab = page.query_selector("text=Summary")
            if not summary_tab: 
                raise PlaywrightError("–í–∫–ª–∞–¥–∫–∞ Summary –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            
            summary_tab.click()
            self._update_status("üñ±Ô∏è –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ Summary", -1)
            time.sleep(random.uniform(8, 12))
            self.simulate_human_behavior(page)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Summary –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            summary_el = self.wait_for_content(page, 'p.ltext-_uoww22', timeout=20)
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
            screenshot_results = {}
            screenshot_paths = []
            
            self._update_status("\nüì∏ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...", -1)
            
            # 1. User Info –±–ª–æ–∫
            self._update_status("\n1Ô∏è‚É£ User Info –±–ª–æ–∫:", -1)
            userinfo_path = self.screenshot_userinfo_block(page, session_id, temp_screenshots_dir)
            screenshot_results['userinfo'] = userinfo_path is not None
            if userinfo_path:
                screenshot_paths.append(userinfo_path)
            time.sleep(random.uniform(1, 2))
            
            # 2. Summary –±–ª–æ–∫
            self._update_status("\n2Ô∏è‚É£ Summary –±–ª–æ–∫:", -1)
            summary_path = self.screenshot_summary_flexible(page, session_id, temp_screenshots_dir, summary_el)
            screenshot_results['summary'] = summary_path is not None
            if summary_path:
                screenshot_paths.append(summary_path)
            time.sleep(random.uniform(1, 2))
            
            # 3. Sentiment –±–ª–æ–∫
            self._update_status("\n3Ô∏è‚É£ Sentiment –±–ª–æ–∫:", -1)
            sentiment_path = self.screenshot_by_title(page, "Sentiment", session_id, temp_screenshots_dir)
            screenshot_results['sentiment'] = sentiment_path is not None
            if sentiment_path:
                screenshot_paths.append(sentiment_path)
            time.sleep(random.uniform(1, 2))
            
            # 4. Actions –±–ª–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
            self._update_status("\n4Ô∏è‚É£ Actions –±–ª–æ–∫:", -1)
            actions_path = self.screenshot_by_title(page, "Actions", session_id, temp_screenshots_dir)
            screenshot_results['actions'] = actions_path is not None
            if actions_path:
                screenshot_paths.append(actions_path)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self._update_status(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:", -1)
            for block, success in screenshot_results.items():
                status = "‚úÖ" if success else "‚ùå"
                self._update_status(f"   {status} {block.capitalize()}", -1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            all_required_success = all(screenshot_results.get(block, False) for block in REQUIRED_BLOCKS)
            valid_screenshots = [p for p in screenshot_paths if p is not None and os.path.exists(p)]
            total_blocks = len(valid_screenshots)
            
            self._update_status(f"\nüéØ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞:", -1)
            self._update_status(f"   üìã –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏: {'‚úÖ' if all_required_success else '‚ùå'}", -1)
            self._update_status(f"   üì∏ –í—Å–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {total_blocks}", -1)
            
            if not all_required_success:
                raise PlaywrightError(f"–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏, —Å–µ—Å—Å–∏—è –Ω–µ—É–¥–∞—á–Ω–∞—è.")
            
            if total_blocks < 3:
                raise PlaywrightError(f"–°–¥–µ–ª–∞–Ω–æ –º–µ–Ω—å—à–µ 3 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ({total_blocks}), —Å–µ—Å—Å–∏—è –Ω–µ—É–¥–∞—á–Ω–∞—è.")

            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤
            session_archive_dir = self.create_session_folder_structure(session_id, valid_screenshots, url_data)
            if not self.create_and_upload_archive(session_archive_dir, session_id):
                raise PlaywrightError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞ –≤ Google Drive.")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
            shutil.rmtree(session_archive_dir, ignore_errors=True)
            
            return True, len(valid_screenshots)

        except (PlaywrightError, PlaywrightTimeoutError) as e:
            self._update_status(f"‚ùå –û—à–∏–±–∫–∞ Playwright: {e}", -1)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
            failure_path = os.path.join(temp_screenshots_dir, f"FAILURE_screenshot.png")
            try: 
                page.screenshot(path=failure_path, full_page=True, timeout=15000)
            except: 
                pass
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –æ—à–∏–±–∫–æ–π
            self.create_and_upload_archive(temp_screenshots_dir, session_id, is_failure=True)
            return False, 0
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
            shutil.rmtree(temp_screenshots_dir, ignore_errors=True)

    def run(self):
        self._update_status("‚ö°Ô∏è RENDER SCREENSHOT COLLECTOR: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Å –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–æ–π", 5)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ URL
        urls_to_process = [{'session_replay_url': url} for url in TEST_URLS]
        total_urls = len(urls_to_process)
        
        self._update_status(f"üéØ –ù–∞–π–¥–µ–Ω–æ {total_urls} —Ç–µ—Å—Ç–æ–≤—ã—Ö URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.", 10)
        
        successful, failed = 0, 0
        
        with sync_playwright() as p:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è Render
            browser_args = [
                '--no-proxy-server',
                '--disable-proxy-config-service', 
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-blink-features=AutomationControlled',
                '--disable-dev-shm-usage',
                '--disable-web-security',
                '--disable-features=VizDisplayCompositor'
            ]
            
            browser = p.chromium.launch(headless=True, args=browser_args)
            
            try:
                for i, url_data in enumerate(urls_to_process, 1):
                    progress = 10 + int((i / total_urls) * 85)
                    self._update_status(f"‚ñ∂Ô∏è [{i}/{total_urls}] URL: {url_data['session_replay_url'][:70]}...", progress)
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ URL
                    user_agent = random.choice(USER_AGENTS)
                    context = browser.new_context(
                        user_agent=user_agent,
                        viewport={'width': 1600, 'height': 1200},
                        locale='en-US',
                        timezone_id='America/New_York'
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ü–∏—é
                    context.add_init_script("""
                        Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                        window.navigator.chrome = { runtime: {} };
                        Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']});
                        Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
                    """)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º cookies
                    if self.cookies: 
                        context.add_cookies(self.cookies)
                    
                    page = context.new_page()

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL
                    is_success, screenshot_count = self.process_single_url(page, url_data)
                    
                    if is_success:
                        successful += 1
                        self._update_status(f"‚úÖ URL —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ({screenshot_count} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)", -1)
                    else:
                        failed += 1
                        self._update_status("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL", -1)
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    page.close()
                    context.close()
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É URL (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                    if i < total_urls:
                        delay = random.uniform(2, 5)
                        self._update_status(f"‚è±Ô∏è –ü–∞—É–∑–∞ {delay:.1f} —Å–µ–∫...", -1)
                        time.sleep(delay)
                        
            finally:
                browser.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "status": "completed", 
            "processed": total_urls, 
            "successful": successful, 
            "failed": failed,
            "success_rate": f"{(successful/total_urls*100):.1f}%" if total_urls > 0 else "0%"
        }
        
        self._update_status(f"üèÅ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!", 100)
        self._update_status(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫", 100)
        self._update_status(f"‚ö° –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {result['success_rate']}", 100)
        self._update_status(f"‚òÅÔ∏è –í—Å–µ –∞—Ä—Ö–∏–≤—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Google Drive", 100)
        
        return result


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∫–∞–∫ –º–æ–¥—É–ª—å
    """
    try:
        def console_status_callback(details: str, progress: int):
            """–ü—Ä–æ—Å—Ç–æ–π callback –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
            if progress != -1:
                print(f"[{progress}%] {details}")
            else:
                print(f"[INFO] {details}")
        
        collector = RenderScreenshotCollector(status_callback=console_status_callback)
        result = collector.run()
        
        print("\n" + "="*60)
        print("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['processed']} URL")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {result['successful']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {result['failed']}")
        print(f"‚ö° –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {result['success_rate']}")
        print("‚òÅÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Drive")
        print("="*60)
        
        return result
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return {"status": "error", "error": str(e)}


if __name__ == "__main__":
    main()