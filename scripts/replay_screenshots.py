import json
import os
import time
import random
import sys
from datetime import datetime
from playwright.sync_api import sync_playwright, Error as PlaywrightError
import tempfile
import shutil
from typing import Callable, Optional

class RenderScreenshotCollector:
    def __init__(self, status_callback: Optional[Callable[[str, int], None]] = None):
        self.status_callback = status_callback
        self.safety_settings = {'min_delay': 1, 'max_delay': 2}

    def _update_status(self, details: str, progress: int):
        if self.status_callback:
            self.status_callback(details, progress)
        print(f"[{progress}%] {details}")

    def process_test_url(self, page):
        try:
            self._update_status("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ google.com...", 25)
            page.goto("https://www.google.com", timeout=30000)
            
            self._update_status("–û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...", 50)
            time.sleep(5)
            
            self._update_status("–ü–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç...", 75)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            temp_dir = tempfile.mkdtemp()
            screenshot_path = os.path.join(temp_dir, "test_screenshot.png")
            page.screenshot(path=screenshot_path)
            
            self._update_status(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω –≤ {screenshot_path}", 90)
            
            # –û—á–∏—Å—Ç–∫–∞
            shutil.rmtree(temp_dir)
            
            return True
        except PlaywrightError as e:
            self._update_status(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Playwright –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ—Å—Ç–µ: {e}", 100)
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                page.screenshot(path="failure_test.png")
            except:
                pass
            return False

    def run(self):
        self._update_status("üöÄ –ó–∞–ø—É—Å–∫ –õ–ê–ö–ú–£–°–û–í–û–ì–û –¢–ï–°–¢–ê –¥–ª—è Playwright...", 0)
        
        is_success = False
        with sync_playwright() as p:
            self._update_status("–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ Chromium...", 10)
            try:
                browser = p.chromium.launch(headless=True, args=['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage'])
                context = browser.new_context()
                page = context.new_page()
                
                is_success = self.process_test_url(page)
                
                browser.close()
            except Exception as e:
                self._update_status(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}", 100)
                is_success = False

        if is_success:
            self._update_status("‚úÖ –õ–∞–∫–º—É—Å–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –∞ –≤ –ª–æ–≥–∏–∫–µ —Ä–∞–±–æ—Ç—ã —Å Amplitude.", 100)
            return {"status": "TEST_SUCCESS"}
        else:
            self._update_status("‚ùå –õ–∞–∫–º—É—Å–æ–≤—ã–π —Ç–µ—Å—Ç –ü–†–û–í–ê–õ–ï–ù! –ü—Ä–æ–±–ª–µ–º–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (Dockerfile –∏–ª–∏ —Ä–µ—Å—É—Ä—Å—ã Render).", 100)
            return {"status": "TEST_FAILED"}

if __name__ == "__main__":
    collector = RenderScreenshotCollector()
    collector.run()
