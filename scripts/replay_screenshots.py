import json
import os
import time
import hashlib
import random
import sys
import gc
import psutil
import tempfile
import shutil
from datetime import datetime
from playwright.sync_api import sync_playwright, Error as PlaywrightError, TimeoutError as PlaywrightTimeoutError
from typing import Callable, Optional
import zipfile
import multiprocessing
import queue
import io

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google API
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload
from google.cloud import bigquery
from google.oauth2 import service_account

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
try:
    from config.settings import settings
except ImportError:
    class MockSettings:
        GOOGLE_APPLICATION_CREDENTIALS = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS', '/etc/secrets/bigquery-credentials.json')
        GDRIVE_FOLDER_ID = os.environ.get('GDRIVE_FOLDER_ID', '1K8cbFU2gYpvP3PiHwOOHS1KREqdj6fQX')
        BQ_PROJECT_ID = os.environ.get('BQ_PROJECT_ID', 'codellon-dwh')
        BQ_DATASET_ID = os.environ.get('BQ_DATASET_ID', 'amplitude_session_replay')
        BQ_TABLE_ID = os.environ.get('BQ_TABLE_ID', 'session_replay_urls')
    settings = MockSettings()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–´ –î–õ–Ø –ü–ê–ú–Ø–¢–ò
PROCESS_TIMEOUT = 120  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 2 –º–∏–Ω—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0"
]

class DriveOAuthClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Drive —á–µ—Ä–µ–∑ OAuth - —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        self.service = None
        self.scopes = ['https://www.googleapis.com/auth/drive.file']
        
    def authenticate(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ—Ç–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            refresh_token = os.environ.get('GOOGLE_REFRESH_TOKEN',
                                           '1//03T0-itzPoL_wCgYIARAAGAMSNwF-L9Irf0MkzkOaGyIoyuwgd40W4BNDS8LG3vHxLJpbVsKNoWHMiLTomq4TjOlEz-2UN2GLMeg')
            client_id = os.environ.get('GOOGLE_CLIENT_ID',
                                       '660095903838-k0bcv8shborcr6u54hrpv9761vr2bcml.apps.googleusercontent.com')
            client_secret = os.environ.get('GOOGLE_CLIENT_SECRET', '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')
            
            if not all([refresh_token, client_id, client_secret]):
                raise ValueError("–ù–µ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã OAuth –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            creds = Credentials(
                token=None,
                refresh_token=refresh_token,
                token_uri='https://oauth2.googleapis.com/token',
                client_id=client_id,
                client_secret=client_secret,
                scopes=self.scopes
            )
            
            creds.refresh(Request())
            self.service = build('drive', 'v3', credentials=creds)
            print("‚úÖ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Drive —É—Å–ø–µ—à–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def upload_file(self, file_path, file_name=None, folder_id=None):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ Google Drive"""
        try:
            if not self.service:
                if not self.authenticate():
                    return None
            
            if not file_name:
                file_name = os.path.basename(file_path)
            
            file_metadata = {'name': file_name}
            if folder_id:
                file_metadata['parents'] = [folder_id]
            
            with open(file_path, 'rb') as file_data:
                media = MediaIoBaseUpload(
                    io.BytesIO(file_data.read()),
                    mimetype='application/octet-stream',
                    resumable=True
                )
            
            file = self.service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id,name,webViewLink'
            ).execute()
            
            print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file.get('name')}")
            print(f"üîó –°—Å—ã–ª–∫–∞: {file.get('webViewLink')}")
            
            return {
                'id': file.get('id'),
                'name': file.get('name'),
                'webViewLink': file.get('webViewLink')
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return None

def sanitize_cookies(cookies):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç cookies –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–æ—Ä–º–∞—Ç—É Playwright"""
    if not cookies:
        return []
    valid_same_site_values = {"Strict", "Lax", "None"}
    sanitized_cookies = []
    for cookie in cookies:
        if cookie.get('sameSite') not in valid_same_site_values:
            original_value = cookie.get('sameSite', '–ö–õ–Æ–ß –û–¢–°–£–¢–°–¢–í–û–í–ê–õ')
            print(f"‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª—è—é sameSite='{original_value}' –Ω–∞ 'Lax' –¥–ª—è –∫—É–∫–∏: {cookie.get('name')}")
            cookie['sameSite'] = 'Lax'
        sanitized_cookies.append(cookie)
    return sanitized_cookies

def worker_process_url(url_data, collector_config, safety_settings, result_queue):
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –°—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–∞–º—è—Ç–∏ –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    browser = None
    context = None
    page = None
    temp_dir = None
    
    try:
        process_pid = os.getpid()
        print(f"üîÑ –ü—Ä–æ—Ü–µ—Å—Å PID {process_pid} –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É URL")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é temp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        temp_dir = tempfile.mkdtemp(prefix=f"worker_{process_pid}_")
        
        collector_config['verbose'] = False
        collector_config['temp_dir'] = temp_dir
        collector = RenderScreenshotCollector(config_override=collector_config)
        sanitized_cookies = sanitize_cookies(collector.cookies)

        with sync_playwright() as p:
            # –ö–†–ò–¢–ò–ß–ù–û: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ browser_args –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            browser_args = [
                '--no-proxy-server',
                '--disable-proxy-config-service',
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-web-security',
                '--disable-features=VizDisplayCompositor',
                '--disable-background-timer-throttling',
                '--disable-backgrounding-occluded-windows',
                '--disable-renderer-backgrounding',
                '--disable-background-networking',
                '--disable-ipc-flooding-protection',
                '--aggressive-cache-discard',
                '--disable-extensions',
                '--disable-plugins',
                '--disable-default-apps',
                '--no-first-run',
                '--disable-infobars',
                # –î–û–ë–ê–í–õ–Ø–ï–ú –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ü–ê–ú–Ø–¢–ò
                '--memory-pressure-off',
                '--max_old_space_size=256',  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º V8 heap –¥–æ 256MB
                '--disable-background-media-transport',
                '--disable-background-sync',
                '--disable-client-side-phishing-detection',
                '--disable-sync',
                '--metrics-recording-only',
                '--no-default-browser-check',
                '--no-pings',
                '--password-store=basic',
                '--use-mock-keychain',
                '--disable-component-extensions-with-background-pages',
                '--mute-audio'
            ]

            browser = p.chromium.launch(
                headless=True,
                args=browser_args,
                slow_mo=300
            )

            user_agent = random.choice(USER_AGENTS)

            # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π viewport –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            context = browser.new_context(
                user_agent=user_agent,
                viewport={'width': 1024, 'height': 600},  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä
                locale='en-US',
                timezone_id='America/New_York',
                ignore_https_errors=True,
                java_script_enabled=True,
                accept_downloads=False,
                bypass_csp=True
            )

            context.add_init_script("""
                Object.defineProperty(navigator, 'webdriver', {get: function() { return undefined; }});
                window.navigator.chrome = { runtime: {} };
            """)

            context.add_cookies(sanitized_cookies)
            page = context.new_page()
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            def handle_route(route):
                resource_type = route.request.resource_type
                if resource_type in ["image", "media", "font"]:  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç—è–∂–µ–ª—ã–µ —Ä–µ—Å—É—Ä—Å—ã
                    route.abort()
                else:
                    route.continue_()
            
            page.route("**/*", handle_route)

            success, _ = collector.process_single_url(page, url_data, safety_settings)
            if success:
                collector.mark_url_as_processed(url_data['url'], success)
            result_queue.put(success)
            
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å PID {process_pid} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É URL")

    except Exception as e:
        print(f"‚ùå [–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ PID {os.getpid()}] URL: {url_data.get('url', 'N/A')}. –û—à–∏–±–∫–∞: {e}")
        result_queue.put(False)
    finally:
        # –ö–†–ò–¢–ò–ß–ù–û: –°–¢–†–û–ì–ê–Ø –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í
        process_pid = os.getpid()
        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID {process_pid}")
        
        try:
            if page:
                page.close()
                page = None
                print(f"‚úÖ PID {process_pid}: page –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            print(f"‚ö†Ô∏è PID {process_pid}: –æ—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è page: {e}")
            
        try:
            if context:
                context.close()
                context = None
                print(f"‚úÖ PID {process_pid}: context –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            print(f"‚ö†Ô∏è PID {process_pid}: –æ—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è context: {e}")
            
        try:
            if browser:
                browser.close()
                browser = None
                print(f"‚úÖ PID {process_pid}: browser –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            print(f"‚ö†Ô∏è PID {process_pid}: –æ—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è browser: {e}")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞
        try:
            if temp_dir and os.path.exists(temp_dir):
                shutil.rmtree(temp_dir, ignore_errors=True)
                print(f"üóëÔ∏è PID {process_pid}: –æ—á–∏—â–µ–Ω–∞ temp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {temp_dir}")
        except Exception as e:
            print(f"‚ö†Ô∏è PID {process_pid}: –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ temp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        collected = gc.collect()
        print(f"üßπ PID {process_pid}: —Å–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤ –º—É—Å–æ—Ä–∞")

class RenderScreenshotCollector:
    def __init__(self, status_callback: Optional[Callable[[str, int], None]] = None, config_override: Optional[dict] = None):
        if config_override:
            self.credentials_path = config_override["credentials_path"]
            self.gdrive_folder_id = config_override["gdrive_folder_id"]
            self.bq_project_id = config_override["bq_project_id"]
            self.bq_dataset_id = config_override["bq_dataset_id"]
            self.bq_table_id = config_override["bq_table_id"]
            self.min_duration_seconds = config_override["min_duration_seconds"]
            self.max_duration_seconds = config_override.get("max_duration_seconds", 3600)
            self.cookies_path = config_override["cookies_path"]
            self.temp_dir = config_override.get("temp_dir", tempfile.mkdtemp())
            self.status_callback = None
            self.verbose = config_override.get('verbose', True)
            self.cookies = self._load_cookies_from_secret_file(verbose=False)
        else:
            self.status_callback = status_callback
            self.cookies_path = "/etc/secrets/cookies.json"
            self.credentials_path = settings.GOOGLE_APPLICATION_CREDENTIALS
            self.gdrive_folder_id = settings.GDRIVE_FOLDER_ID
            self.bq_project_id = settings.BQ_PROJECT_ID
            self.bq_dataset_id = settings.BQ_DATASET_ID
            self.bq_table_id = settings.BQ_TABLE_ID
            self.min_duration_seconds = int(os.environ.get('MIN_DURATION_SECONDS', '20'))
            self.max_duration_seconds = int(os.environ.get('MAX_DURATION_SECONDS', '3600'))
            self.verbose = True
            self.start_time = None
            self.total_processed, self.total_successful, self.total_failed, self.total_timeouts = 0, 0, 0, 0
            
            # –î–û–ë–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é temp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            self.temp_base_dir = tempfile.mkdtemp(prefix="session_replay_main_")
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.temp_base_dir}")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º cleanup –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            import atexit
            atexit.register(self.cleanup_temp_files)
            
            self._update_status("üîê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...", 1)
            self.cookies = self._load_cookies_from_secret_file()
        
        self.full_table_name = f"`{self.bq_project_id}.{self.bq_dataset_id}.{self.bq_table_id}`"
        self._init_bigquery()
        self._init_google_drive_oauth()

    def cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            if hasattr(self, 'temp_base_dir') and os.path.exists(self.temp_base_dir):
                shutil.rmtree(self.temp_base_dir, ignore_errors=True)
                print(f"üóëÔ∏è –û—á–∏—â–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.temp_base_dir}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ temp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")

    def monitor_memory_usage(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            process = psutil.Process()
            memory_info = process.memory_info()
            memory_mb = memory_info.rss / 1024 / 1024
            
            # –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –ø–∞–º—è—Ç—å –±–æ–ª—å—à–µ 1.5GB
            if memory_mb > 1536:
                print(f"‚ö†Ô∏è –í–´–°–û–ö–û–ï –ü–û–¢–†–ï–ë–õ–ï–ù–ò–ï –ü–ê–ú–Ø–¢–ò: {memory_mb:.1f} MB")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
                collected = gc.collect()
                print(f"üßπ –°–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤ –º—É—Å–æ—Ä–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
                memory_after = psutil.Process().memory_info().rss / 1024 / 1024
                print(f"üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {memory_after:.1f} MB")
                
                # –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –≤—Å–µ –µ—â–µ –≤—ã—Å–æ–∫–∞—è, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É
                if memory_after > 1536:
                    print(f"‚è±Ô∏è –ü–∞—É–∑–∞ 30 —Å–µ–∫ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏...")
                    time.sleep(30)
                
            return memory_mb
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏: {e}")
            return 0

    def _update_status(self, details: str, progress: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
        if self.status_callback:
            self.status_callback(details, progress)
        if self.verbose:
            timestamp = datetime.now().strftime("%H:%M:%S")
            print(f"[{timestamp}] {details}")

    def _load_cookies_from_secret_file(self, verbose=True):
        """–ó–∞–≥—Ä—É–∑–∫–∞ cookies –∏–∑ —Ñ–∞–π–ª–∞"""
        if verbose and self.verbose:
            self._update_status(f"–ó–∞–≥—Ä—É–∑–∫–∞ cookies –∏–∑ {self.cookies_path}...", 2)
        if not os.path.exists(self.cookies_path):
            if verbose and self.verbose:
                self._update_status(f"‚ùå –§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω!", 2)
            return []
        try:
            with open(self.cookies_path, 'r') as f:
                cookies = json.load(f)
            if verbose and self.verbose:
                self._update_status(f"‚úÖ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({len(cookies)} —à—Ç).", 3)
            return cookies
        except Exception as e:
            if verbose and self.verbose:
                self._update_status(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cookies: {e}", 3)
            return []

    def _init_bigquery(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BigQuery"""
        try:
            credentials = service_account.Credentials.from_service_account_file(
                self.credentials_path, scopes=["https://www.googleapis.com/auth/bigquery"])
            self.bq_client = bigquery.Client(credentials=credentials, project=self.bq_project_id)
            if self.verbose:
                self._update_status("‚úÖ BigQuery –ø–æ–¥–∫–ª—é—á–µ–Ω", 4)
        except Exception as e:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BigQuery: {e}")

    def _init_google_drive_oauth(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Drive —á–µ—Ä–µ–∑ OAuth"""
        try:
            self.drive_client = DriveOAuthClient()
            if not self.drive_client.authenticate():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google Drive")
            if self.verbose:
                self._update_status("‚úÖ Google Drive OAuth –ø–æ–¥–∫–ª—é—á–µ–Ω", 5)
        except Exception as e:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Drive: {e}")

    def get_unprocessed_urls(self, limit=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö URL —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        query = f"""
        SELECT 
            session_replay_url,
            amplitude_id,
            session_replay_id,
            duration_seconds,
            events_count,
            record_date
        FROM {self.full_table_name}
        WHERE is_processed = FALSE
        AND duration_seconds >= {self.min_duration_seconds}
        AND duration_seconds <= {self.max_duration_seconds}
        ORDER BY record_date DESC
        """
        if limit:
            query += f"\nLIMIT {limit}"

        if self.verbose:
            print(f"üîç –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ URL –∏–∑ BigQuery...")
            print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π: –æ—Ç {self.min_duration_seconds} –¥–æ {self.max_duration_seconds} —Å–µ–∫")

        try:
            result = self.bq_client.query(query).result()
            urls_data = []
            for row in result:
                urls_data.append({
                    'url': row.session_replay_url,
                    'amplitude_id': row.amplitude_id,
                    'session_replay_id': row.session_replay_id,
                    'duration_seconds': row.duration_seconds,
                    'events_count': row.events_count,
                    'record_date': row.record_date.strftime('%Y-%m-%d') if hasattr(row.record_date, 'strftime') else str(row.record_date)
                })
            if self.verbose:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(urls_data)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö URL")
            return urls_data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL: {e}")
            raise

    def mark_url_as_processed(self, url, success=True):
        """–û—Ç–º–µ—Ç–∫–∞ URL –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤ BigQuery"""
        try:
            update_query = f"""
            UPDATE {self.full_table_name} 
            SET is_processed = TRUE 
            WHERE session_replay_url = @url
            """
            job_config = bigquery.QueryJobConfig(
                query_parameters=[bigquery.ScalarQueryParameter("url", "STRING", url)]
            )
            self.bq_client.query(update_query, job_config=job_config).result()
            status_message = "‚úÖ URL –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π" if success else "‚ö†Ô∏è URL –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π (—Å –æ—à–∏–±–∫–æ–π)"
            if self.verbose:
                print(status_message)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ URL: {e}")

    def get_session_id_from_url(self, url):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Å–µ—Å—Å–∏–∏ –∏–∑ URL"""
        url_hash = hashlib.md5(url.encode()).hexdigest()[:8]
        if "sessionReplayId=" in url:
            parts = url.split("sessionReplayId=")[1].split("&")[0].split("/")
            session_replay_id = parts[0]
            session_start_time = parts[1] if len(parts) > 1 else "unknown"
            return f"{session_replay_id}_{session_start_time}_{url_hash}"
        return f"no_session_id_{url_hash}"

    def wait_for_content(self, page, selector, bad_texts=("Loading", "Loading summary"), timeout=60, min_text_length=10, retries=3):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        print(f"‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–∞–π–º–∞—É—Ç {timeout} —Å–µ–∫, –ø–æ–ø—ã—Ç–æ–∫ {retries})...")
        for attempt in range(retries):
            start = time.time()
            last_log = 0
            while True:
                el = page.query_selector(selector)
                if el:
                    txt = el.inner_text().strip()
                    if txt and all(bad not in txt for bad in bad_texts) and len(txt) >= min_text_length:
                        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ {time.time() - start:.1f} —Å–µ–∫ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                        return el
                elapsed = time.time() - start
                if elapsed - last_log >= 5:
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})... {elapsed:.1f}/{timeout} —Å–µ–∫")
                    last_log = elapsed
                if elapsed > timeout:
                    print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ {timeout} —Å–µ–∫ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                    break
                time.sleep(0.5)
            if attempt < retries - 1:
                time.sleep(5)
        return None

    def simulate_human_behavior(self, page, full_scroll=False):
        """–ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        try:
            for _ in range(random.randint(2, 4)):  # –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–∏–∂–µ–Ω–∏–π
                x = random.randint(200, 1000)
                y = random.randint(200, 600)
                page.mouse.move(x, y, steps=random.randint(3, 8))
                time.sleep(random.uniform(0.1, 0.3))
            if random.random() < 0.6 or full_scroll:
                scroll_amount = random.randint(100, 400)
                direction = random.choice([1, -1])
                page.evaluate(f"window.scrollBy(0, {scroll_amount * direction})")
                time.sleep(random.uniform(0.5, 1.0))
        except Exception:
            pass

    def hide_popups_and_overlays(self, page):
        """–°–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏"""
        try:
            print("üôà –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã...")
            page.evaluate("""
                () => {
                    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    const popupSelectors = [
                        // –û–ø—Ä–æ—Å—ã –∏ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                        '[data-testid*="survey"]',
                        '[data-testid*="modal"]',
                        '[data-testid*="popup"]',
                        '[data-testid*="feedback"]',
                        '[class*="survey"]',
                        '[class*="modal"]',
                        '[class*="popup"]',
                        '[class*="overlay"]',
                        '[class*="dialog"]',
                        '[class*="feedback"]',
                        '[class*="toast"]',
                        '[class*="notification"]',
                        '[id*="survey"]',
                        '[id*="modal"]',
                        '[id*="popup"]',
                        '[id*="feedback"]',
                        
                        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Amplitude
                        '[class*="amplitude-survey"]',
                        '[class*="amplitude-feedback"]',
                        '[class*="amplitude-modal"]',
                        
                        // –û–±—â–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        '.ReactModal__Overlay',
                        '.modal-overlay',
                        '.popup-overlay',
                        '.dialog-overlay',
                        
                        // –≠–ª–µ–º–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º z-index (–æ–±—ã—á–Ω–æ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ)
                        '*[style*="z-index: 9"]',
                        '*[style*="position: fixed"]',
                        '*[style*="position: absolute"][style*="top: 0"]'
                    ];
                    
                    let hiddenCount = 0;
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    popupSelectors.forEach(selector => {
                        try {
                            const elements = document.querySelectorAll(selector);
                            elements.forEach(element => {
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º—ã–π –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–π
                                const computedStyle = window.getComputedStyle(element);
                                const isVisible = computedStyle.display !== 'none' && 
                                                computedStyle.visibility !== 'hidden' &&
                                                computedStyle.opacity !== '0';
                                
                                if (isVisible) {
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä - —Å–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–≤–µ—Ä–æ—è—Ç–Ω–æ –æ–ø—Ä–æ—Å—ã)
                                    const rect = element.getBoundingClientRect();
                                    if (rect.width < window.innerWidth * 0.8 && rect.height < window.innerHeight * 0.8) {
                                        element.style.display = 'none';
                                        hiddenCount++;
                                    }
                                }
                            });
                        } catch (e) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
                        }
                    });
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º, –ø–æ—Ö–æ–∂–∏–º –Ω–∞ –æ–ø—Ä–æ—Å—ã
                    const allElements = document.querySelectorAll('*');
                    allElements.forEach(element => {
                        try {
                            const text = element.innerText || element.textContent || '';
                            const isSmallElement = element.getBoundingClientRect().width < 500 && 
                                                 element.getBoundingClientRect().height < 400;
                            
                            if (isSmallElement && (
                                text.includes('What could be improved') ||
                                text.includes('Select any options') ||
                                text.includes('Continue') ||
                                text.includes('Loading speed') ||
                                text.includes('Quality of replay') ||
                                text.includes('Missing or inconsistent data') ||
                                text.includes('Sync with event stream') ||
                                text.includes('experience with this replay')
                            )) {
                                // –°–∫—Ä—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                                let parent = element;
                                for (let i = 0; i < 5; i++) {
                                    parent = parent.parentElement;
                                    if (!parent) break;
                                    
                                    const parentRect = parent.getBoundingClientRect();
                                    if (parentRect.width < 600 && parentRect.height < 500) {
                                        parent.style.display = 'none';
                                        hiddenCount++;
                                        break;
                                    }
                                }
                            }
                        } catch (e) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                        }
                    });
                    
                    console.log(`–°–∫—Ä—ã—Ç–æ ${hiddenCount} –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                    return hiddenCount;
                }
            """)
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            time.sleep(1)
            print("‚úÖ –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∫—Ä—ã—Ç—ã")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∫—Ä—ã—Ç–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ

    def screenshot_summary_flexible(self, page, session_id, base_dir="screens", summary_el=None):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç Summary –±–ª–æ–∫–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞
        if hasattr(self, 'temp_dir'):
            base_dir = self.temp_dir
        os.makedirs(base_dir, exist_ok=True)
        print("üìÑ –ò—â–µ–º Summary –±–ª–æ–∫...")

        # –°–ö–†–´–í–ê–ï–ú –í–°–ü–õ–´–í–ê–Æ–©–ò–ï –≠–õ–ï–ú–ï–ù–¢–´ –ü–ï–†–ï–î –°–ö–†–ò–ù–®–û–¢–û–ú
        self.hide_popups_and_overlays(page)

        el = summary_el
        if not el:
            print("   Summary —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—â–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
            time.sleep(3)

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ Summary
            text_only_selectors = [
                'p.ltext-_uoww22',
                'div:has(p.ltext-_uoww22) p.ltext-_uoww22',
                '[data-testid="session-replay-summary"] p',
                'div[class*="summary"] p:not(:has(button))',
                'p[class*="ltext"]:not(:has(button))'
            ]

            for selector in text_only_selectors:
                try:
                    el = page.query_selector(selector)
                    if el:
                        text = el.inner_text().strip()
                        if text and len(text) > 20 and "Loading" not in text and "Replay Summary" not in text:
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                            print(f"   –¢–µ–∫—Å—Ç: {text[:50]}...")
                            break
                        else:
                            el = None
                except Exception:
                    continue

            # Fallback –ø–æ–∏—Å–∫
            if not el:
                print("   –ò—â–µ–º Summary —Ç–µ–∫—Å—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É...")
                try:
                    all_paragraphs = page.query_selector_all('p')
                    for paragraph in all_paragraphs:
                        try:
                            text = paragraph.inner_text().strip()
                            bbox = paragraph.bounding_box() if paragraph else None

                            if (text and len(text) > 50 and len(text) < 2000 and
                                    bbox and bbox['height'] > 30 and
                                    any(word in text.lower() for word in
                                        ['user', 'session', 'the user', 'began', 'placed', 'navigated']) and
                                    "Loading" not in text and
                                    "Replay Summary" not in text and
                                    "Summary" not in text and
                                    not any(btn in text for btn in ['üëç', 'üëé', 'like', 'dislike'])):

                                el = paragraph
                                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç Summary: {text[:50]}...")
                                break
                        except Exception:
                            continue
                except Exception:
                    pass

        if el:
            text_content = el.inner_text().strip()
            if len(text_content) > 20:
                print(f"‚úÖ Summary —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                print(f"‚ö†Ô∏è Summary —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                el = None

        if not el:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç Summary –±–ª–æ–∫–∞")
            return []

        try:
            # –ï—â–µ —Ä–∞–∑ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
            self.hide_popups_and_overlays(page)
            time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
            
            img_name = os.path.join(base_dir, f"{session_id}_summary.png")
            el.screenshot(path=img_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(img_name) / 1024 / 1024  # MB
            print(f"‚úÖ Summary —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ({file_size:.1f} MB)")
            
            return [img_name]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Summary: {e}")
            return []

    def screenshot_by_title(self, page, block_title, session_id, base_dir):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –±–ª–æ–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞
        if hasattr(self, 'temp_dir'):
            base_dir = self.temp_dir
        os.makedirs(base_dir, exist_ok=True)
        print(f"üîç –ò—â–µ–º –±–ª–æ–∫ '{block_title}'...")
        
        # –°–ö–†–´–í–ê–ï–ú –í–°–ü–õ–´–í–ê–Æ–©–ò–ï –≠–õ–ï–ú–ï–ù–¢–´ –ü–ï–†–ï–î –ü–û–ò–°–ö–û–ú
        self.hide_popups_and_overlays(page)
        
        el = None
        
        search_selectors = [
            f'h4:has-text("{block_title}")',
            f'h3:has-text("{block_title}")',
            f'h2:has-text("{block_title}")',
            f'div:has-text("{block_title}")',
            f'span:has-text("{block_title}")',
            f'h5:has-text("{block_title}")',
            f'[title="{block_title}"]',
            f'[aria-label="{block_title}"]',
            f'[data-testid*="{block_title.lower()}"]',
            f'div[class*="sentiment"]',
            f'div[class*="actions"]',
            f'div:has-text("User Sentiment")',
            f'div:has-text("Session Actions")'
        ]
        
        for selector in search_selectors:
            try:
                maybe = page.query_selector(selector)
                if maybe:
                    print(f"üìç –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å '{block_title}' —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                    parent = maybe
                    for level in range(6):
                        try:
                            bbox = parent.bounding_box()
                            if bbox and bbox['height'] > 60 and bbox['width'] > 200:
                                text_content = parent.inner_text().strip()
                                if text_content and len(text_content) > 10:
                                    el = parent
                                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ —É—Ä–æ–≤–Ω–µ {level}")
                                    break
                        except Exception:
                            pass
                        try:
                            parent = parent.evaluate_handle('el => el.parentElement').as_element()
                            if not parent:
                                break
                        except Exception:
                            break
                    if el:
                        break
            except Exception:
                continue

        if not el:
            print(f"‚ùå –ë–ª–æ–∫ '{block_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return None

        try:
            # –ï—â–µ —Ä–∞–∑ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
            self.hide_popups_and_overlays(page)
            time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
            
            img_path = os.path.join(base_dir, f"{session_id}_{block_title.lower()}.png")
            el.screenshot(path=img_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(img_path) / 1024 / 1024  # MB
            print(f"‚úÖ {block_title} —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ({file_size:.1f} MB)")
            
            return img_path
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ {block_title}: {e}")
            return None

    def screenshot_userinfo_block(self, page, session_id, base_dir):
        """–°–∫—Ä–∏–Ω—à–æ—Ç –±–ª–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞
        if hasattr(self, 'temp_dir'):
            base_dir = self.temp_dir
        os.makedirs(base_dir, exist_ok=True)
        
        # –°–ö–†–´–í–ê–ï–ú –í–°–ü–õ–´–í–ê–Æ–©–ò–ï –≠–õ–ï–ú–ï–ù–¢–´ –ü–ï–†–ï–î –ü–û–ò–°–ö–û–ú
        self.hide_popups_and_overlays(page)
        
        self.simulate_human_behavior(page, full_scroll=True)
        userinfo_div = None
        
        try:
            css_selector = '.cerulean-cardbase.cerulean-alpha-general-card'
            elements = page.query_selector_all(css_selector)
            for element in elements:
                try:
                    text = element.inner_text().strip()
                    bbox = element.bounding_box()
                    if (bbox and
                            bbox['y'] < 400 and
                            text and
                            len(text) > 10 and len(text) < 500 and
                            (any(char.isdigit() for char in text) or
                             any(country in text for country in
                                 ["Spain", "Peru", "Bolivia", "Ecuador", "Netherlands", "Costa Rica", "Russia"]))):
                        userinfo_div = element
                        break
                except Exception:
                    continue
        except Exception:
            pass

        if not userinfo_div:
            try:
                session_selectors = [
                    'text=Session Length',
                    'text=Event Total',
                    'text=Device Type'
                ]
                for selector in session_selectors:
                    element = page.query_selector(selector)
                    if element:
                        parent = element
                        for _ in range(5):
                            try:
                                parent = parent.evaluate_handle('el => el.parentElement').as_element()
                                if parent:
                                    bbox = parent.bounding_box()
                                    text = parent.inner_text().strip()
                                    if (bbox and bbox['y'] < 400 and
                                            bbox['width'] > 200 and bbox['height'] > 80 and
                                            len(text) > 20 and len(text) < 500):
                                        userinfo_div = parent
                                        break
                            except Exception:
                                break
                        if userinfo_div:
                            break
            except Exception:
                pass

        if not userinfo_div:
            print("‚ö†Ô∏è User info –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        try:
            # –ï—â–µ —Ä–∞–∑ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
            self.hide_popups_and_overlays(page)
            time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
            
            img_path = os.path.join(base_dir, f"{session_id}_userinfo.png")
            userinfo_div.screenshot(path=img_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(img_path) / 1024 / 1024  # MB
            print(f"‚úÖ User info —Å–æ—Ö—Ä–∞–Ω—ë–Ω ({file_size:.1f} MB)")
            
            return img_path
        except Exception:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ user info")
            return None

    def create_session_folder_structure(self, session_id, screenshots, url_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–∫–∏ —Å–µ—Å—Å–∏–∏ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"""
        session_dir = f"temp_session_{session_id}"
        os.makedirs(session_dir, exist_ok=True)
        session_screenshots = []
        
        for screenshot_path in screenshots:
            if screenshot_path and os.path.exists(screenshot_path):
                filename = os.path.basename(screenshot_path)
                new_path = os.path.join(session_dir, filename)
                shutil.copy2(screenshot_path, new_path)
                session_screenshots.append(new_path)
        
        metadata = {
            "session_id": session_id,
            "url": url_data['url'],
            "amplitude_id": url_data['amplitude_id'],
            "session_replay_id": url_data['session_replay_id'],
            "duration_seconds": url_data['duration_seconds'],
            "events_count": url_data['events_count'],
            "record_date": url_data['record_date'],
            "processed_at": datetime.now().isoformat(),
            "screenshots": [os.path.basename(path) for path in session_screenshots]
        }
        metadata_path = os.path.join(session_dir, "metadata.json")
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
        return session_dir, session_screenshots + [metadata_path]

    def upload_to_google_drive(self, file_path, filename, folder_id):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Google Drive"""
        try:
            return self.drive_client.upload_file(file_path, filename, folder_id)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive: {e}")
            return None

    def create_and_upload_session_archive(self, session_dir, session_id, is_failure=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ —Å–µ—Å—Å–∏–∏ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"""
        try:
            prefix = "FAILURE" if is_failure else "session_replay"
            archive_name = f"{prefix}_{session_id}_{int(time.time())}.zip"
            archive_path = archive_name
            
            with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, _, files in os.walk(session_dir):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, session_dir)
                        zipf.write(file_path, arcname)
            
            print(f"üì¶ –°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤: {archive_name}")
            uploaded_file = self.upload_to_google_drive(
                archive_path,
                archive_name,
                self.gdrive_folder_id
            )
            
            if uploaded_file:
                print(f"‚òÅÔ∏è –ê—Ä—Ö–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive")
                print(f"üîó –°—Å—ã–ª–∫–∞: {uploaded_file.get('webViewLink')}")
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                shutil.rmtree(session_dir, ignore_errors=True)
                if os.path.exists(archive_path):
                    os.remove(archive_path)
                return uploaded_file
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ö–∏–≤")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
            return None

    def process_single_url(self, page, url_data, safety_settings):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ URL - –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"""
        url = url_data['url']
        session_id = self.get_session_id_from_url(url)
        print(f"‚ñ∂Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é: {session_id} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {url_data['duration_seconds']} —Å–µ–∫)")
        REQUIRED_BLOCKS = ['userinfo', 'summary', 'sentiment']

        screenshot_paths = []
        summary_el = None

        try:
            print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            page.goto(url, timeout=90000, wait_until='domcontentloaded')
            print("‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω")

            # –ü—Ä–æ–±—É–µ–º –¥–æ–∂–¥–∞—Ç—å—Å—è networkidle, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            try:
                page.wait_for_load_state('networkidle', timeout=15000)
                print("‚úÖ –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å")
            except Exception as e:
                print(f"‚ö†Ô∏è NetworkIdle –Ω–µ –¥–æ–∂–¥–∞–ª–∏—Å—å: {e}")

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            try:
                page.wait_for_selector('button, [role="button"], nav, header', timeout=20000)
                print("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception:
                print("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

            time.sleep(8)  # –£–º–µ–Ω—å—à–∏–ª–∏ –ø–∞—É–∑—É
            self.simulate_human_behavior(page, full_scroll=True)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if "/login" in page.url:
                login_successful = self.login_and_update_cookies(page)
                if not login_successful:
                    return False, []
                page.goto(url, timeout=60000, wait_until='domcontentloaded')
                time.sleep(random.uniform(2, 5))

            # –ü–æ–∏—Å–∫ Summary –≤–∫–ª–∞–¥–∫–∏
            summary_tab = None
            print("üîç –ò—â–µ–º Summary –≤–∫–ª–∞–¥–∫—É...")

            try:
                page.wait_for_selector('[role="tab"], button, .tab', timeout=20000)
                print("‚úÖ –í–∫–ª–∞–¥–∫–∏ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception:
                print("‚ö†Ô∏è –í–∫–ª–∞–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            summary_selectors = [
                "text=Summary",
                "button:has-text('Summary')",
                "[role='tab']:has-text('Summary')",
                "[data-testid*='summary']",
                ".tab:has-text('Summary')",
                "[class*='tab']:has-text('Summary')",
                "div:has-text('Summary')",
                "*:has-text('Summary')"
            ]

            for i, selector in enumerate(summary_selectors, 1):
                try:
                    print(f"   {i}. –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                    elements = page.query_selector_all(selector)

                    for element in elements:
                        try:
                            text = element.inner_text().strip()
                            bbox = element.bounding_box()

                            if (text == "Summary" or "Summary" in text) and bbox:
                                is_visible = element.is_visible()
                                is_enabled = element.is_enabled()

                                if is_visible and is_enabled:
                                    summary_tab = element
                                    print(f"‚úÖ Summary –≤–∫–ª–∞–¥–∫–∞ –Ω–∞–π–¥–µ–Ω–∞! –°–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                                    break
                        except Exception:
                            continue

                    if summary_tab:
                        break
                except Exception:
                    continue

            if summary_tab:
                print("üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –Ω–∞ Summary –≤–∫–ª–∞–¥–∫—É...")
                self.simulate_human_behavior(page)

                try:
                    summary_tab.scroll_into_view_if_needed()
                    time.sleep(1)
                    summary_tab.click()
                    print("‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                except Exception as e:
                    try:
                        summary_tab.click(force=True)
                        print("‚úÖ Force –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    except Exception as e2:
                        try:
                            summary_tab.evaluate("element => element.click()")
                            print("‚úÖ JavaScript –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        except Exception as e3:
                            print(f"‚ùå –í—Å–µ –≤–∏–¥—ã –∫–ª–∏–∫–æ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏: {e3}")
                            return False, []

                print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É Summary –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
                time.sleep(random.uniform(5, 8))

                # –ü–æ–∏—Å–∫ Summary –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                summary_loaded = False
                summary_content = None

                summary_content_selectors = [
                    'p.ltext-_uoww22',
                    '[data-testid="session-replay-summary"]',
                    'p:has-text("The user")',
                    'p:has-text("session")',
                    'div[class*="summary"] p',
                    'div[class*="text"] p',
                    '.ltext-_uoww22',
                    'p[class*="ltext"]'
                ]

                for attempt in range(10):  # –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                    try:
                        for selector in summary_content_selectors:
                            try:
                                element = page.query_selector(selector)
                                if element:
                                    text = element.inner_text().strip()
                                    if text and len(text) > 20 and "Loading" not in text and "summary" not in text.lower():
                                        summary_content = element
                                        summary_loaded = True
                                        print(f"‚úÖ Summary –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                                        break
                            except Exception:
                                continue

                        if summary_loaded:
                            break

                        # Fallback –ø–æ–∏—Å–∫
                        all_paragraphs = page.query_selector_all('p')
                        for p in all_paragraphs:
                            try:
                                text = p.inner_text().strip()
                                if (text and len(text) > 50 and
                                        any(word in text.lower() for word in
                                            ['user', 'session', 'the user', 'began']) and
                                        "Loading" not in text):
                                    summary_content = p
                                    summary_loaded = True
                                    print(f"‚úÖ Summary –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ fallback (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                                    break
                            except Exception:
                                continue

                        if summary_loaded:
                            break
                    except Exception:
                        pass

                    print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/10 - Summary –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
                    time.sleep(1.5)

                summary_el = summary_content if summary_loaded else None
            else:
                print("‚ùå Summary –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return False, []

            # –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ù–®–û–¢–û–í
            screenshot_results = {}
            print("\nüì∏ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...")

            print("\n1Ô∏è‚É£ User Info –±–ª–æ–∫:")
            self.simulate_human_behavior(page, full_scroll=True)
            userinfo_path = self.screenshot_userinfo_block(page, session_id, "screens")
            screenshot_results['userinfo'] = userinfo_path is not None
            screenshot_paths = [userinfo_path] if userinfo_path else []
            time.sleep(random.uniform(1, 2))

            print("\n2Ô∏è‚É£ Summary –±–ª–æ–∫:")
            self.simulate_human_behavior(page, full_scroll=True)
            summary_paths = self.screenshot_summary_flexible(page, session_id, "screens", summary_el=summary_el)
            screenshot_results['summary'] = len(summary_paths) > 0
            if summary_paths:
                screenshot_paths.extend(summary_paths)
            time.sleep(random.uniform(1, 2))

            print("\n3Ô∏è‚É£ Sentiment –±–ª–æ–∫:")
            self.simulate_human_behavior(page, full_scroll=True)
            sentiment_path = self.screenshot_by_title(page, "Sentiment", session_id, "screens")
            screenshot_results['sentiment'] = sentiment_path is not None
            if sentiment_path:
                screenshot_paths.append(sentiment_path)
            time.sleep(random.uniform(1, 2))

            print("\n4Ô∏è‚É£ Actions –±–ª–æ–∫:")
            self.simulate_human_behavior(page, full_scroll=True)
            actions_path = self.screenshot_by_title(page, "Actions", session_id, "screens")
            screenshot_results['actions'] = actions_path is not None
            if actions_path:
                screenshot_paths.append(actions_path)

            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:")
            for block, success in screenshot_results.items():
                status = "‚úÖ" if success else "‚ùå"
                print(f"   {status} {block.capitalize()}")

            all_required_success = all(screenshot_results.get(block, False) for block in REQUIRED_BLOCKS)
            total_blocks = len([path for path in screenshot_paths if path and os.path.exists(path)])

            print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞:")
            print(f"   üìã –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏: {'‚úÖ' if all_required_success else '‚ùå'}")
            print(f"   üì∏ –í—Å–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {total_blocks}")

            if not all_required_success:
                print("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏.")
                return False, screenshot_paths
            if total_blocks < 3:
                print(f"‚ùå –ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ 3 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ({total_blocks}).")
                return False, screenshot_paths

            session_dir, all_files = self.create_session_folder_structure(
                session_id, screenshot_paths, url_data
            )

            uploaded_file = self.create_and_upload_session_archive(session_dir, session_id)

            if uploaded_file:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for path in screenshot_paths:
                    if path and os.path.exists(path):
                        os.remove(path)
                return True, screenshot_paths
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ö–∏–≤")
                return False, screenshot_paths

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL {url}: {e}")
            import traceback
            traceback.print_exc()
            return False, screenshot_paths

    def login_and_update_cookies(self, page, max_retries=3):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        login = os.environ.get('AMPLITUDE_LOGIN')
        password = os.environ.get('AMPLITUDE_PASSWORD')
        if not login or not password:
            print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ AMPLITUDE_LOGIN –∏/–∏–ª–∏ AMPLITUDE_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            return False
        
        for attempt in range(max_retries):
            print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {attempt + 1}/{max_retries}...")
            try:
                page.goto("https://app.amplitude.com/login", timeout=60000)
                page.fill('input[name="username"]', login)
                page.click('button[type="submit"]')
                password_input = page.wait_for_selector('input[name="password"]', timeout=15000)
                password_input.fill(password)
                page.click('button[type="submit"]')
                page.wait_for_url(lambda url: "login" not in url, timeout=60000)
                page.wait_for_selector("nav", timeout=30000)
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                
                new_cookies = page.context.cookies()
                with open(self.cookies_path, 'w') as f:
                    json.dump(new_cookies, f)
                self.cookies = new_cookies
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                if attempt < max_retries - 1:
                    time.sleep(random.uniform(5, 10))
        return False

    def get_safety_settings(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Pro –ø–ª–∞–Ω–∞"""
        safety_mode = os.environ.get('SAFETY_MODE', 'normal').lower()
        settings = {
            'slow': {'min_delay': 5, 'max_delay': 10, 'batch_size': 3, 'batch_pause_min': 120, 'batch_pause_max': 180, 'name': '–ú–ï–î–õ–ï–ù–ù–´–ô'},
            'normal': {'min_delay': 3, 'max_delay': 7, 'batch_size': 5, 'batch_pause_min': 90, 'batch_pause_max': 150, 'name': '–û–ë–´–ß–ù–´–ô'},  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –±–∞—Ç—á
            'fast': {'min_delay': 2, 'max_delay': 5, 'batch_size': 8, 'batch_pause_min': 60, 'batch_pause_max': 90, 'name': '–ë–´–°–¢–†–´–ô'}
        }
        return settings.get(safety_mode, settings['normal'])

    def get_url_count(self, total_urls):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            count = int(os.environ.get('URL_COUNT', total_urls))
            return min(count, total_urls)
        except ValueError:
            return total_urls

    def print_progress(self, current, total, start_time, successful, failed, timeouts):
        """–í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø–∞–º—è—Ç–∏"""
        elapsed = time.time() - start_time
        percent = (current / total) * 100
        eta = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if current > 0:
            avg_time = elapsed / current
            remaining = (total - current) * avg_time
            remaining_min = remaining / 60
            eta = f"{remaining_min / 60:.1f}—á" if remaining_min > 60 else f"{remaining_min:.1f}–º–∏–Ω"

        print(f"\n" + "=" * 20 + " –ü–†–û–ì–†–ï–°–° " + "=" * 20)
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {current}/{total} ({percent:.1f}%) | ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ~{eta}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful} | ‚ùå –û—à–∏–±–æ–∫: {failed} | ‚ùó –ó–∞–≤–∏—Å–∞–Ω–∏–π: {timeouts}")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
        current_memory = self.monitor_memory_usage()
        print("=" * 50)

    def process_batch(self, urls_batch, safety_settings):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞–º—è—Ç–∏"""
        batch_start_time = time.time()
        batch_successful, batch_failed, batch_timeouts = 0, 0, 0
        
        initial_memory = self.monitor_memory_usage()
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞ –∏–∑ {len(urls_batch)} URL... (–ü–∞–º—è—Ç—å: {initial_memory:.1f} MB)")
        
        result_queue = multiprocessing.Queue()
        collector_config = {
            "credentials_path": self.credentials_path,
            "gdrive_folder_id": self.gdrive_folder_id,
            "bq_project_id": self.bq_project_id,
            "bq_dataset_id": self.bq_dataset_id,
            "bq_table_id": self.bq_table_id,
            "min_duration_seconds": self.min_duration_seconds,
            "max_duration_seconds": self.max_duration_seconds,
            "cookies_path": self.cookies_path
        }
        
        for i, url_data in enumerate(urls_batch, 1):
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º URL
            current_memory = self.monitor_memory_usage()
            
            # –ï—Å–ª–∏ –ø–∞–º—è—Ç—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É
            if current_memory > 2048:  # 2GB
                print(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ ({current_memory:.1f} MB), –ø–∞—É–∑–∞ 60 —Å–µ–∫...")
                time.sleep(60)
                gc.collect()
            
            print(f"\n--- [{i}/{len(urls_batch)}] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è URL: ...{url_data['url'][-50:]} (–ü–∞–º—è—Ç—å: {current_memory:.1f} MB) ---")

            process = multiprocessing.Process(
                target=worker_process_url,
                args=(url_data, collector_config, safety_settings, result_queue)
            )
            process.start()
            process.join(timeout=PROCESS_TIMEOUT)

            if process.is_alive():
                print(f"‚ùó‚ùó‚ùó –ü–†–ï–í–´–®–ï–ù –¢–ê–ô–ú–ê–£–¢ ({PROCESS_TIMEOUT} —Å–µ–∫)! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                process.terminate()
                time.sleep(5)
                
                if process.is_alive():
                    print(f"üî™ –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, —É–±–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ...")
                    process.kill()
                    
                process.join()
                batch_timeouts += 1
                batch_failed += 1
                self.mark_url_as_processed(url_data['url'], success=False)
            else:
                try:
                    success = result_queue.get_nowait()
                    if success:
                        batch_successful += 1
                        print("‚úÖ URL —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
                    else:
                        batch_failed += 1
                        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL.")
                except queue.Empty:
                    batch_failed += 1
                    self.mark_url_as_processed(url_data['url'], success=False)
                    print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")

            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            try:
                while not result_queue.empty():
                    result_queue.get_nowait()
            except queue.Empty:
                pass

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            gc.collect()
            
            if i < len(urls_batch):
                delay = random.uniform(safety_settings['min_delay'], safety_settings['max_delay'])
                print(f"‚è±Ô∏è –ü–∞—É–∑–∞ {delay:.1f} —Å–µ–∫...")
                time.sleep(delay)
            
            if i % 3 == 0 or i == len(urls_batch):
                self.print_progress(i, len(urls_batch), batch_start_time, batch_successful, batch_failed, batch_timeouts)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.total_processed += len(urls_batch)
        self.total_successful += batch_successful
        self.total_failed += batch_failed
        self.total_timeouts += batch_timeouts
        
        final_memory = self.monitor_memory_usage()
        memory_diff = final_memory - initial_memory
        batch_time = time.time() - batch_start_time
        
        print(f"\nüì¶ –ë–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {batch_time/60:.1f} –º–∏–Ω.")
        print(f"üìä [–£—Å–ø–µ—à–Ω–æ: {batch_successful}, –û—à–∏–±–æ–∫: {batch_failed}, –ó–∞–≤–∏—Å–∞–Ω–∏–π: {batch_timeouts}]")
        print(f"üíæ –ü–∞–º—è—Ç—å: –±—ã–ª–æ {initial_memory:.1f} MB, —Å—Ç–∞–ª–æ {final_memory:.1f} MB (—Ä–∞–∑–Ω–∏—Ü–∞: {memory_diff:+.1f} MB)")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        self.start_time = time.time()
        print("üöÄ –°–ë–û–†–©–ò–ö –°–ö–†–ò–ù–®–û–¢–û–í SESSION REPLAY - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù –î–õ–Ø –ü–ê–ú–Ø–¢–ò")
        print("BigQuery ‚Üí Screenshots ‚Üí Google Drive")
        print("=" * 60)
        
        safety_settings = self.get_safety_settings()
        print(f"üõ°Ô∏è –†–µ–∂–∏–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {safety_settings['name']}")
        print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –Ω–∞ 1 URL: {PROCESS_TIMEOUT} —Å–µ–∫")
        print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {safety_settings['batch_size']} URL")
        print(f"‚òÅÔ∏è Google Drive –ø–∞–ø–∫–∞: {self.gdrive_folder_id}")

        urls_data = self.get_unprocessed_urls()
        if not urls_data:
            print("üéâ –í—Å–µ URL —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            return

        count_to_process = self.get_url_count(len(urls_data))
        urls_to_process = urls_data[:count_to_process]
        print(f"üéØ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(urls_to_process)} URL")

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
        initial_memory = self.monitor_memory_usage()

        try:
            for i in range(0, len(urls_to_process), safety_settings['batch_size']):
                batch = urls_to_process[i:i + safety_settings['batch_size']]
                
                print(f"\n{'='*20} –ë–ê–¢–ß {(i//safety_settings['batch_size'])+1} {'='*20}")
                self.process_batch(batch, safety_settings)
                
                if i + safety_settings['batch_size'] < len(urls_to_process):
                    batch_pause = random.uniform(safety_settings['batch_pause_min'], safety_settings['batch_pause_max'])
                    print(f"‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏: {batch_pause:.1f} —Å–µ–∫...")
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                    gc.collect()
                    time.sleep(batch_pause)
                    
        except KeyboardInterrupt:
            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        
        self.print_overall_stats()

    def print_overall_stats(self):
        """–í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.start_time:
            elapsed = time.time() - self.start_time
            elapsed_hours = elapsed / 3600
            success_rate = (self.total_successful / self.total_processed * 100) if self.total_processed > 0 else 0
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
            final_memory = self.monitor_memory_usage()
            
            print(f"\n" + "=" * 60)
            print(f"üéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.total_processed} URL")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.total_successful}")
            print(f"‚ùå –û—à–∏–±–æ–∫ (–≤–∫–ª—é—á–∞—è –∑–∞–≤–∏—Å–∞–Ω–∏—è): {self.total_failed}")
            print(f"‚ùó –ò–∑ –Ω–∏—Ö –∑–∞–≤–∏—Å–∞–Ω–∏–π (Timeout): {self.total_timeouts}")
            print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {elapsed_hours:.1f} —á–∞—Å–æ–≤")
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
            print(f"üíæ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {final_memory:.1f} MB")
            if self.total_processed > 0:
                avg_time_per_url = elapsed / self.total_processed
                print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ URL: {avg_time_per_url:.1f} —Å–µ–∫")
            print(f"‚òÅÔ∏è –í—Å–µ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Google Drive.")
            print(f"üíæ –°—Ç–∞—Ç—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ BigQuery.")
            print("=" * 60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è –ø–∞–º—è—Ç–∏"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    if sys.platform != 'win32':
        multiprocessing.set_start_method('spawn', force=True)
    multiprocessing.freeze_support()

    print("üîß OAuth —Ç–æ–∫–µ–Ω—ã –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–¥ - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
    print("üíæ –í–ö–õ–Æ–ß–ï–ù–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–ê–ú–Ø–¢–ò –î–õ–Ø PRO –ü–õ–ê–ù–ê")

    try:
        collector = RenderScreenshotCollector()
        collector.run()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        gc.collect()
        print("üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()