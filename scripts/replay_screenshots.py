import os
import sys
import time
import random
from typing import Callable, Optional

from playwright.sync_api import sync_playwright, Error as PlaywrightError

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
# –í —ç—Ç–æ–º —Ç–µ—Å—Ç–æ–≤–æ–º —Å–∫—Ä–∏–ø—Ç–µ –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
USER_AGENTS = ["Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0"]
TEST_URLS = [
    'https://app.amplitude.com/analytics/rn/session-replay/project/258068/search/amplitude_id%3D1247117195850?sessionReplayId=b04f4dad-3dea-4249-b9fe-78b689c822a5/1749812689447&sessionStartTime=1749812689447',
    'https://app.amplitude.com/analytics/rn/session-replay/project/258068/search/amplitude_id%3D1247144093674?sessionReplayId=09d7d9ec-9d2f-453b-83f5-5b403e45c202/1749823352686&sessionStartTime=1749823352686',
    'https://app.amplitude.com/analytics/rn/session-replay/project/258068/search/amplitude_id%3D868026320025?sessionReplayId=03e5a484-6f63-4fb2-8964-2893e062ea27/1749825242509&sessionStartTime=1749825242509'
]

class RenderScreenshotCollector:
    def __init__(self, status_callback: Optional[Callable[[str, int], None]] = None):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞."""
        self.status_callback = status_callback
        self.cookies = self._load_cookies_from_secret_file()

    def _update_status(self, details: str, progress: int):
        if self.status_callback:
            self.status_callback(details, progress)
        print(f"[{progress}%] {details}")

    def _load_cookies_from_secret_file(self):
        """–ß–∏—Ç–∞–µ—Ç cookies –∏–∑ "Secret File", –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        secret_file_path = "/etc/secrets/cookies.json"
        if not os.path.exists(secret_file_path):
            self._update_status(f"–§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.", 2)
            return []
        try:
            with open(secret_file_path, 'r') as f:
                cookies = json.load(f)
            self._update_status(f"Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({len(cookies)} —à—Ç).", 2)
            return cookies
        except Exception as e:
            self._update_status(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cookies: {e}", 2)
            return []

    def process_single_url(self, page, url: str) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å URL –∏ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç."""
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self._update_status(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ URL...", -1)
            page.goto(url, timeout=60000, wait_until="domcontentloaded")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–≥–ª–∞ —á—Ç–æ-—Ç–æ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å
            self._update_status(f"–û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...", -1)
            time.sleep(10)

            # –ü—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç (–æ–Ω –Ω–∏–∫—É–¥–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è, –≤–∞–∂–µ–Ω —Å–∞–º —Ñ–∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
            self._update_status(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç...", -1)
            page.screenshot(timeout=20000)
            
            self._update_status(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è URL —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω.", -1)
            return True

        except PlaywrightError as e:
            self._update_status(f"‚ùå –û—à–∏–±–∫–∞ Playwright: {e}", -1)
            return False
        except Exception as e:
            self._update_status(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", -1)
            return False

    def run(self):
        self._update_status("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–∞ 3 —Å—Å—ã–ª–∫–∞—Ö...", 0)
        
        successful, failed = 0, 0
        
        with sync_playwright() as p:
            self._update_status("–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ Firefox...", 10)
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Firefox –∫–∞–∫ –±–æ–ª–µ–µ –ª–µ–≥–∫–æ–≤–µ—Å–Ω—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
                browser = p.firefox.launch(headless=True)
                
                for i, url in enumerate(TEST_URLS, 1):
                    progress = 10 + int((i / len(TEST_URLS)) * 85)
                    self._update_status(f"‚ñ∂Ô∏è [{i}/{len(TEST_URLS)}] –¢–µ—Å—Ç–∏—Ä—É–µ–º URL: {url[:70]}...", progress)
                    
                    context = browser.new_context(user_agent=random.choice(USER_AGENTS))
                    if self.cookies:
                        context.add_cookies(self.cookies)
                    page = context.new_page()

                    if self.process_single_url(page, url):
                        successful += 1
                    else:
                        failed += 1
                    
                    page.close()
                    context.close()
                
                browser.close()
            except Exception as e:
                self._update_status(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞: {e}", 100)
                failed = len(TEST_URLS) - successful

        self._update_status(f"üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ: {successful}, –û—à–∏–±–∫–∏: {failed}", 100)
        return {"status": "test_completed", "successful": successful, "failed": failed}

if __name__ == "__main__":
    # –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
    collector = RenderScreenshotCollector()
    collector.run()
