from fastapi import APIRouter, BackgroundTasks, HTTPException
from fastapi.responses import JSONResponse
import subprocess
import os
import logging
from datetime import datetime
import sys
import uuid # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –∑–∞–¥–∞—á
from typing import Dict, Any, Optional

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑ main –∏ –ª–æ–≥–∏–∫—É —Å–∫—Ä–∏–ø—Ç–∞ ---
from main import task_statuses
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —Å–∫—Ä–∏–ø—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è '2_replay_ai_gbq.py' –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'scripts'
from scripts.s2_replay_ai_gbq import RenderScreenshotCollector 
# -----------------------------------------------------------------

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
router = APIRouter()
logger = logging.getLogger(__name__)

def run_script_safe(script_path: str, script_name: str) -> Dict[str, Any]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ (–æ—Å—Ç–∞—ë—Ç—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤)."""
    start_time = datetime.now()
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ subprocess: {script_name}")
        if not os.path.exists(script_path):
            raise FileNotFoundError(f"–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
        
        process = subprocess.Popen(
            [sys.executable, script_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            bufsize=1,
            universal_newlines=True
        )
        stdout, stderr = process.communicate()
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        if process.returncode == 0:
            logger.info(f"–°–∫—Ä–∏–ø—Ç {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫")
            return {"status": "success", "script": script_name, "duration_seconds": duration}
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ {script_name}: {stderr}")
            return {"status": "error", "script": script_name, "error": stderr}
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ {script_name}: {str(e)}")
        return {"status": "critical_error", "script": script_name, "error": str(e)}

# --- –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä—â–∏–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ---
def run_screenshot_task(task_id: str):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä—â–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.
    """
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å–±–æ—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, ID: {task_id}")
    task_statuses[task_id] = {
        "status": "running",
        "progress": 0,
        "details": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...",
        "start_time": datetime.now().isoformat(),
        "end_time": None,
        "result": None
    }

    def status_callback(details: str, progress: int):
        """Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑–Ω—É—Ç—Ä–∏ —Å–∫—Ä–∏–ø—Ç–∞."""
        if task_id in task_statuses:
            task_statuses[task_id]["details"] = details
            task_statuses[task_id]["progress"] = progress
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id}: [{progress}%] {details}")

    try:
        collector = RenderScreenshotCollector(status_callback=status_callback)
        result = collector.run()
        
        task_statuses[task_id].update({
            "status": "completed",
            "progress": 100,
            "details": "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            "end_time": datetime.now().isoformat(),
            "result": result
        })

    except Exception as e:
        error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {str(e)}"
        logger.error(f"ID –∑–∞–¥–∞—á–∏ {task_id}: {error_message}", exc_info=True)
        task_statuses[task_id].update({
            "status": "failed",
            "details": error_message,
            "end_time": datetime.now().isoformat()
        })
# -----------------------------------------------------------

# === SCRIPTS MANAGEMENT ENDPOINTS ===

@router.post("/scripts/collect-links", summary="üîó –°–±–æ—Ä Session Replay —Å—Å—ã–ª–æ–∫", tags=["üîß Scripts Management"])
async def run_collect_links(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ Session Replay —Å—Å—ã–ª–æ–∫ –∏–∑ BigQuery (—Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º)."""
    script_path = "scripts/1_collect_links_put_gbq.py"
    background_tasks.add_task(run_script_safe, script_path, "Collect Links")
    return {"message": "–°–∫—Ä–∏–ø—Ç 'Collect Links' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."}


@router.post(
    "/scripts/screenshots",
    summary="üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º)",
    description="–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.",
    tags=["üîß Scripts Management"]
)
async def run_replay_screenshots_tracked(background_tasks: BackgroundTasks):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∑–∞–¥–∞—á–∏.
    """
    task_id = str(uuid.uuid4())
    task_statuses[task_id] = {
        "status": "queued", 
        "details": "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
        "start_time": datetime.now().isoformat()
    }
    
    background_tasks.add_task(run_screenshot_task, task_id)
    
    return {
        "message": "–ó–∞–¥–∞—á–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.",
        "task_id": task_id,
        "status_url": f"/api/task-status/{task_id}"
    }

@router.post("/scripts/extract-text", 
            summary="üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
            description="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Google Drive",
            tags=["üîß Scripts Management"])
async def run_extract_text(background_tasks: BackgroundTasks, sync: bool = False):
    """–ó–∞–ø—É—Å–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
    script_path = "scripts/3_collect_replay_screens.py"
    
    if sync:
        result = run_script_safe(script_path, "Extract Text")
        if result["status"] == "error":
            raise HTTPException(status_code=500, detail=result)
        return result
    else:
        return await run_script_background(script_path, "Extract Text", background_tasks)

@router.post("/scripts/clustering", 
            summary="üß† ML-–∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è",
            description="–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π",
            tags=["üîß Scripts Management"])
async def run_clustering(background_tasks: BackgroundTasks, sync: bool = False):
    """–ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    script_path = "scripts/4_get_clasters_gbq.py"
    
    if sync:
        result = run_script_safe(script_path, "Clustering")
        if result["status"] == "error":
            raise HTTPException(status_code=500, detail=result)
        return result
    else:
        return await run_script_background(script_path, "Clustering", background_tasks)

@router.post("/scripts/summarize", 
            summary="üìù AI –°–∞–º–º–∞—Ä–∏",
            description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI",
            tags=["üîß Scripts Management"])
async def run_summarize(background_tasks: BackgroundTasks, sync: bool = False):
    """–ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ LLM"""
    script_path = "scripts/5_summarazing.py"
    
    if sync:
        result = run_script_safe(script_path, "Summarize")
        if result["status"] == "error":
            raise HTTPException(status_code=500, detail=result)
        return result
    else:
        return await run_script_background(script_path, "Summarize", background_tasks)

# === PIPELINE OPERATIONS ===

@router.post("/pipeline/full", 
            summary="üöÄ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω",
            description="–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ",
            tags=["üîÑ Pipeline Operations"])
async def run_full_pipeline(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def execute_pipeline():
        pipeline_results = []
        scripts = [
            ("scripts/1_collect_links_put_gbq.py", "üîó Collect Links"),
            ("scripts/2_replay_ai_gbq.py", "üì∏ Replay Screenshots"), 
            ("scripts/3_collect_replay_screens.py", "üìÑ Extract Text"),
            ("scripts/4_get_clasters_gbq.py", "üß† Clustering"),
            ("scripts/5_summarazing.py", "üìù Summarize")
        ]
        
        for script_path, script_name in scripts:
            result = run_script_safe(script_path, script_name)
            pipeline_results.append(result)
            
            if result["status"] in ["error", "critical_error", "timeout"]:
                logger.error(f"–ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ: {script_name}")
                break
                
        return {
            "status": "completed",
            "pipeline_results": pipeline_results,
            "total_scripts": len(scripts),
            "completed_scripts": len(pipeline_results)
        }
    
    background_tasks.add_task(execute_pipeline)
    return {
        "message": "–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "status": "queued",
        "scripts": ["üîó Collect Links", "üì∏ Replay Screenshots", "üìÑ Extract Text", "üß† Clustering", "üìù Summarize"]
    }

# === MONITORING & STATUS ===

@router.get("/monitoring/scripts", 
           summary="üìã –°—Ç–∞—Ç—É—Å —Å–∫—Ä–∏–ø—Ç–æ–≤",
           description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤",
           tags=["üìä Monitoring"])
async def get_scripts_status():
    """–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    scripts = [
        {"name": "üîó Collect Links", "path": "scripts/1_collect_links_put_gbq.py"},
        {"name": "üì∏ Replay Screenshots", "path": "scripts/2_replay_ai_gbq.py"},
        {"name": "üìÑ Extract Text", "path": "scripts/3_collect_replay_screens.py"},
        {"name": "üß† Clustering", "path": "scripts/4_get_clasters_gbq.py"},
        {"name": "üìù Summarize", "path": "scripts/5_summarazing.py"}
    ]
    
    scripts_status = []
    for script in scripts:
        exists = os.path.exists(script["path"])
        scripts_status.append({
            "name": script["name"],
            "path": script["path"],
            "exists": exists,
            "status": "‚úÖ ready" if exists else "‚ùå missing"
        })
    
    return {
        "scripts": scripts_status,
        "total_scripts": len(scripts),
        "ready_scripts": sum(1 for s in scripts_status if s["status"] == "‚úÖ ready")
    }

# === LEGACY ENDPOINTS (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ===

@router.post("/collect-links", 
            summary="üîó –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ (legacy)",
            description="–£—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scripts/collect-links",
            deprecated=True,
            tags=["‚ö†Ô∏è Legacy"])
async def run_collect_links_legacy(background_tasks: BackgroundTasks, sync: bool = False):
    """Legacy endpoint - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scripts/collect-links"""
    return await run_collect_links(background_tasks, sync)

@router.post("/replay-screenshots", 
            summary="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã (legacy)",
            description="–£—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scripts/screenshots", 
            deprecated=True,
            tags=["‚ö†Ô∏è Legacy"])
async def run_replay_screenshots_legacy(background_tasks: BackgroundTasks, sync: bool = False):
    """Legacy endpoint - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scripts/screenshots"""
    return await run_replay_screenshots(background_tasks, sync)

@router.post("/clustering", 
            summary="üß† –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (legacy)",
            description="–£—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scripts/clustering",
            deprecated=True,
            tags=["‚ö†Ô∏è Legacy"])
async def run_clustering_legacy(background_tasks: BackgroundTasks, sync: bool = False):
    """Legacy endpoint - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scripts/clustering"""
    return await run_clustering(background_tasks, sync)

@router.post("/summarize", 
            summary="üìù –°–∞–º–º–∞—Ä–∏ (legacy)",
            description="–£—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scripts/summarize",
            deprecated=True,
            tags=["‚ö†Ô∏è Legacy"])
async def run_summarize_legacy(background_tasks: BackgroundTasks, sync: bool = False):
    """Legacy endpoint - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scripts/summarize"""
    return await run_summarize(background_tasks, sync)

@router.post("/full-pipeline", 
            summary="üöÄ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω (legacy)",
            description="–£—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pipeline/full",
            deprecated=True,
            tags=["‚ö†Ô∏è Legacy"])
async def run_full_pipeline_legacy(background_tasks: BackgroundTasks):
    """Legacy endpoint - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pipeline/full"""
    return await run_full_pipeline(background_tasks)

@router.get("/scripts/status", 
           summary="üìã –°—Ç–∞—Ç—É—Å —Å–∫—Ä–∏–ø—Ç–æ–≤ (legacy)",
           description="–£—Å—Ç–∞—Ä–µ–≤—à–∏–π endpoint, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /monitoring/scripts",
           deprecated=True,
           tags=["‚ö†Ô∏è Legacy"])
async def get_scripts_status_legacy():
    """Legacy endpoint - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /monitoring/scripts"""
    return await get_scripts_status()