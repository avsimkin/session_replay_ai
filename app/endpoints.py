from fastapi import APIRouter, BackgroundTasks, HTTPException
from fastapi.responses import JSONResponse
import subprocess
import os
import logging
from datetime import datetime
from typing import Dict, Any, Optional

# –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ—É—Ç–µ—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
router = APIRouter()

# –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
scripts_router = APIRouter(prefix="/scripts", tags=["üîß Scripts Management"])
pipeline_router = APIRouter(prefix="/pipeline", tags=["üîÑ Pipeline Operations"])  
monitoring_router = APIRouter(prefix="/monitoring", tags=["üìä Monitoring & Status"])

logger = logging.getLogger(__name__)

def run_script_safe(script_path: str, script_name: str) -> Dict[str, Any]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    start_time = datetime.now()
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {script_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        if not os.path.exists(script_path):
            raise FileNotFoundError(f"–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        result = subprocess.run(
            ['python', script_path], 
            capture_output=True, 
            text=True, 
            timeout=1800  # 30 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        )
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        if result.returncode == 0:
            logger.info(f"–°–∫—Ä–∏–ø—Ç {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫")
            return {
                "status": "success",
                "script": script_name,
                "duration_seconds": duration,
                "start_time": start_time.isoformat(),
                "end_time": end_time.isoformat(),
                "stdout": result.stdout[-1000:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
                "message": f"–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫"
            }
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ {script_name}: {result.stderr}")
            return {
                "status": "error",
                "script": script_name,
                "duration_seconds": duration,
                "start_time": start_time.isoformat(),
                "end_time": end_time.isoformat(),
                "stdout": result.stdout[-500:],
                "stderr": result.stderr[-500:],
                "message": f"–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π"
            }
            
    except subprocess.TimeoutExpired:
        logger.error(f"–¢–∞–π–º–∞—É—Ç —Å–∫—Ä–∏–ø—Ç–∞ {script_name}")
        return {
            "status": "timeout",
            "script": script_name,
            "duration_seconds": 1800,
            "message": "–°–∫—Ä–∏–ø—Ç –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (30 –º–∏–Ω)"
        }
    except Exception as e:
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ {script_name}: {str(e)}")
        return {
            "status": "critical_error",
            "script": script_name,
            "duration_seconds": duration,
            "error": str(e),
            "message": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        }

async def run_script_background(script_path: str, script_name: str, background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≤ —Ñ–æ–Ω–µ"""
    def execute_script():
        return run_script_safe(script_path, script_name)
    
    background_tasks.add_task(execute_script)
    return {
        "message": f"–°–∫—Ä–∏–ø—Ç {script_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "status": "queued",
        "script": script_name
    }

# === SCRIPTS MANAGEMENT ENDPOINTS ===

@scripts_router.post("/collect-links", 
                    summary="üîó –°–±–æ—Ä Session Replay —Å—Å—ã–ª–æ–∫",
                    description="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Session Replay ID –∏–∑ BigQuery –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫")
async def run_collect_links(background_tasks: BackgroundTasks, sync: bool = False):
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ Session Replay —Å—Å—ã–ª–æ–∫ –∏–∑ BigQuery"""
    script_path = "scripts/collect_links_put_gbq.py"
    
    if sync:
        result = run_script_safe(script_path, "Collect Links")
        if result["status"] == "error":
            raise HTTPException(status_code=500, detail=result)
        return result
    else:
        return await run_script_background(script_path, "Collect Links", background_tasks)

@scripts_router.post("/screenshots", 
                    summary="üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤",
                    description="–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ Session Replay —á–µ—Ä–µ–∑ Playwright")
async def run_replay_screenshots(background_tasks: BackgroundTasks, sync: bool = False):
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ Session Replay"""
    script_path = "scripts/replay_ai_gbq.py"
    
    if sync:
        result = run_script_safe(script_path, "Replay Screenshots")
        if result["status"] == "error":
            raise HTTPException(status_code=500, detail=result)
        return result
    else:
        return await run_script_background(script_path, "Replay Screenshots", background_tasks)

@scripts_router.post("/clustering", 
                    summary="üß† ML-–∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è",
                    description="–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π")
async def run_clustering(background_tasks: BackgroundTasks, sync: bool = False):
    """–ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    script_path = "scripts/get_clasters_gbq.py"
    
    if sync:
        result = run_script_safe(script_path, "Clustering")
        if result["status"] == "error":
            raise HTTPException(status_code=500, detail=result)
        return result
    else:
        return await run_script_background(script_path, "Clustering", background_tasks)

@scripts_router.post("/summarize", 
                    summary="üìù AI –°–∞–º–º–∞—Ä–∏",
                    description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI")
async def run_summarize(background_tasks: BackgroundTasks, sync: bool = False):
    """–ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ LLM"""
    script_path = "scripts/summarazing.py"
    
    if sync:
        result = run_script_safe(script_path, "Summarize")
        if result["status"] == "error":
            raise HTTPException(status_code=500, detail=result)
        return result
    else:
        return await run_script_background(script_path, "Summarize", background_tasks)

# === PIPELINE OPERATIONS ===

@pipeline_router.post("/full", 
                     summary="üöÄ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω",
                     description="–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ")
async def run_full_pipeline(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def execute_pipeline():
        pipeline_results = []
        scripts = [
            ("scripts/collect_links_put_gbq.py", "üîó Collect Links"),
            ("scripts/replay_ai_gbq.py", "üì∏ Replay Screenshots"), 
            ("scripts/get_clasters_gbq.py", "üß† Clustering"),
            ("scripts/summarazing.py", "üìù Summarize")
        ]
        
        for script_path, script_name in scripts:
            result = run_script_safe(script_path, script_name)
            pipeline_results.append(result)
            
            if result["status"] in ["error", "critical_error", "timeout"]:
                logger.error(f"–ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ: {script_name}")
                break
                
        return {
            "status": "completed",
            "pipeline_results": pipeline_results,
            "total_scripts": len(scripts),
            "completed_scripts": len(pipeline_results)
        }
    
    background_tasks.add_task(execute_pipeline)
    return {
        "message": "–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "status": "queued",
        "scripts": ["üîó Collect Links", "üì∏ Replay Screenshots", "üß† Clustering", "üìù Summarize"]
    }

@pipeline_router.post("/daily", 
                     summary="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω",
                     description="–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞")
async def run_daily_pipeline_manual(background_tasks: BackgroundTasks):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    def execute_pipeline():
        logger.info("üéØ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑ main.py —Ñ—É–Ω–∫—Ü–∏–∏ run_daily_analytics_pipeline
        return {"status": "manual_daily_pipeline_completed"}
    
    background_tasks.add_task(execute_pipeline)
    
    return {
        "message": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é",
        "status": "queued", 
        "start_time": datetime.now().isoformat(),
        "estimated_duration_minutes": "10-30"
    }

# === MONITORING & STATUS ===

@monitoring_router.get("/scripts", 
                      summary="üìã –°—Ç–∞—Ç—É—Å —Å–∫—Ä–∏–ø—Ç–æ–≤",
                      description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤")
async def get_scripts_status():
    """–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    scripts = [
        {"name": "üîó Collect Links", "path": "scripts/collect_links_put_gbq.py"},
        {"name": "üì∏ Replay Screenshots", "path": "scripts/replay_ai_gbq.py"},
        {"name": "üß† Clustering", "path": "scripts/get_clasters_gbq.py"},
        {"name": "üìù Summarize", "path": "scripts/summarazing.py"}
    ]
    
    scripts_status = []
    for script in scripts:
        exists = os.path.exists(script["path"])
        scripts_status.append({
            "name": script["name"],
            "path": script["path"],
            "exists": exists,
            "status": "‚úÖ ready" if exists else "‚ùå missing"
        })
    
    return {
        "scripts": scripts_status,
        "total_scripts": len(scripts),
        "ready_scripts": sum(1 for s in scripts_status if s["status"] == "‚úÖ ready")
    }