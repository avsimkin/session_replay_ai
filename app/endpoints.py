from fastapi import APIRouter, BackgroundTasks, HTTPException
import subprocess
import os
import logging
from datetime import datetime
import sys
import uuid
from typing import Dict, Any, Optional

# 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ app/state.py, —Ä–∞–∑—Ä—ã–≤–∞—è —Ü–∏–∫–ª.
from app.state import task_statuses

# 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é.
#    –î–æ–±–∞–≤–ª–µ–Ω sys.path.append –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç.
try:
    from scripts.s2_replay_ai_gbq import RenderScreenshotCollector
except ImportError:
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
    from scripts.s2_replay_ai_gbq import RenderScreenshotCollector


# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
router = APIRouter()
logger = logging.getLogger(__name__)

def run_script_safe(script_path: str, script_name: str) -> Dict[str, Any]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≤ –≤–∏–¥–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    –û—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.
    """
    start_time = datetime.now()
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ subprocess: {script_name}")
        if not os.path.exists(script_path):
            raise FileNotFoundError(f"–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
        
        process = subprocess.Popen(
            [sys.executable, script_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            bufsize=1,
            universal_newlines=True
        )
        stdout, stderr = process.communicate()
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        if process.returncode == 0:
            logger.info(f"–°–∫—Ä–∏–ø—Ç {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫")
            return {"status": "success", "script": script_name, "duration_seconds": duration, "output": stdout}
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ {script_name}: {stderr}")
            return {"status": "error", "script": script_name, "error": stderr}
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ {script_name}: {str(e)}")
        return {"status": "critical_error", "script": script_name, "error": str(e)}

def run_screenshot_task(task_id: str):
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä—â–∏–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    """
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å–±–æ—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, ID: {task_id}")
    task_statuses[task_id].update({
        "status": "running",
        "progress": 0,
        "details": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...",
        "start_time": datetime.now().isoformat()
    })

    def status_callback(details: str, progress: int):
        """Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –∏–∑–Ω—É—Ç—Ä–∏ —Å–∫—Ä–∏–ø—Ç–∞."""
        if task_id in task_statuses:
            task_statuses[task_id]["details"] = details
            task_statuses[task_id]["progress"] = progress
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id}: [{progress}%] {details}")

    try:
        collector = RenderScreenshotCollector(status_callback=status_callback)
        result = collector.run()
        
        task_statuses[task_id].update({
            "status": "completed",
            "progress": 100,
            "details": "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            "end_time": datetime.now().isoformat(),
            "result": result
        })

    except Exception as e:
        error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {str(e)}"
        logger.error(f"ID –∑–∞–¥–∞—á–∏ {task_id}: {error_message}", exc_info=True)
        task_statuses[task_id].update({
            "status": "failed",
            "progress": 100, # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ö–æ—Ç—å –∏ —Å –æ—à–∏–±–∫–æ–π
            "details": error_message,
            "end_time": datetime.now().isoformat()
        })

# === API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞–º–∏ ===

@router.post("/scripts/collect-links", summary="üîó 1. –°–±–æ—Ä Session Replay —Å—Å—ã–ª–æ–∫", tags=["üîß Scripts Management"])
async def run_collect_links(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ Session Replay —Å—Å—ã–ª–æ–∫ –∏–∑ BigQuery (—Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º)."""
    script_path = "scripts/1_collect_links_put_gbq.py"
    background_tasks.add_task(run_script_safe, script_path, "Collect Links")
    return {"message": "–°–∫—Ä–∏–ø—Ç 'Collect Links' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."}


@router.post(
    "/scripts/screenshots",
    summary="üì∏ 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º)",
    description="–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.",
    tags=["üîß Scripts Management"]
)
async def run_replay_screenshots_tracked(background_tasks: BackgroundTasks):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.
    """
    task_id = str(uuid.uuid4())
    task_statuses[task_id] = {
        "status": "queued", 
        "details": "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
        "start_time": datetime.now().isoformat()
    }
    
    background_tasks.add_task(run_screenshot_task, task_id)
    
    return {
        "message": "–ó–∞–¥–∞—á–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.",
        "task_id": task_id,
        "status_url": f"/api/task-status/{task_id}"
    }

@router.post("/scripts/extract-text", summary="üìÑ 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞", tags=["üîß Scripts Management"])
async def run_extract_text(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (—Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º)."""
    script_path = "scripts/3_collect_replay_screens.py"
    background_tasks.add_task(run_script_safe, script_path, "Extract Text")
    return {"message": "–°–∫—Ä–∏–ø—Ç 'Extract Text' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."}

@router.post("/scripts/clustering", summary="üß† 4. ML-–∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è", tags=["üîß Scripts Management"])
async def run_clustering(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (—Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º)."""
    script_path = "scripts/4_get_clasters_gbq.py"
    background_tasks.add_task(run_script_safe, script_path, "Clustering")
    return {"message": "–°–∫—Ä–∏–ø—Ç 'Clustering' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."}

@router.post("/scripts/summarize", summary="üìù 5. AI –°–∞–º–º–∞—Ä–∏", tags=["üîß Scripts Management"])
async def run_summarize(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ LLM (—Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º)."""
    script_path = "scripts/5_summarazing.py"
    background_tasks.add_task(run_script_safe, script_path, "Summarize")
    return {"message": "–°–∫—Ä–∏–ø—Ç 'Summarize' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."}
