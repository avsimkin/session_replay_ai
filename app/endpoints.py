from fastapi import APIRouter, BackgroundTasks
import subprocess
import os
import logging
from datetime import datetime
import sys
import uuid
from typing import Dict, Any
from scripts.extract_text import TextExtractionProcessor
from scripts.clustering_analysis import ClusteringAnalysisProcessor


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ app.state
from app.state import task_statuses

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
from scripts.replay_screenshots import RenderScreenshotCollector

router = APIRouter()
logger = logging.getLogger(__name__)

def run_script_safe(script_path: str, script_name: str) -> Dict[str, Any]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≤ –≤–∏–¥–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ subprocess: {script_name}")
    try:
        if not os.path.exists(script_path):
            raise FileNotFoundError(f"–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
        
        process = subprocess.run(
            [sys.executable, script_path],
            capture_output=True,
            text=True,
            check=False,
            timeout=1800
        )
        
        if process.returncode == 0:
            logger.info(f"–°–∫—Ä–∏–ø—Ç {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
            return {"status": "success", "script": script_name, "output": process.stdout}
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ {script_name}: {process.stderr}")
            return {"status": "error", "script": script_name, "error": process.stderr}
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {script_name}: {str(e)}")
        return {"status": "critical_error", "script": script_name, "error": str(e)}

def run_screenshot_task(task_id: str):
    """–§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä—â–∏–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º."""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å–±–æ—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, ID: {task_id}")
    task_statuses[task_id].update({
        "status": "running",
        "progress": 0,
        "details": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...",
        "start_time": datetime.now().isoformat()
    })

    def status_callback(details: str, progress: int):
        """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏."""
        if task_id in task_statuses:
            task_statuses[task_id]["details"] = details
            task_statuses[task_id]["progress"] = progress
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id}: [{progress}%] {details}")

    try:
        collector = RenderScreenshotCollector(status_callback=status_callback)
        result = collector.run()
        
        task_statuses[task_id].update({
            "status": "completed",
            "progress": 100,
            "details": "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            "end_time": datetime.now().isoformat(),
            "result": result
        })
    except Exception as e:
        error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {str(e)}"
        logger.error(f"ID –∑–∞–¥–∞—á–∏ {task_id}: {error_message}", exc_info=True)
        task_statuses[task_id].update({
            "status": "failed",
            "progress": 100,
            "details": error_message,
            "end_time": datetime.now().isoformat()
        })

def run_ocr_task(task_id: str):
    """–§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º."""
    logger.info(f"üî§ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏, ID: {task_id}")
    task_statuses[task_id].update({
        "status": "running",
        "progress": 0,
        "details": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR...",
        "start_time": datetime.now().isoformat()
    })

    def status_callback(details: str, progress: int):
        """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ OCR –∑–∞–¥–∞—á–∏."""
        if task_id in task_statuses:
            task_statuses[task_id]["details"] = details
            task_statuses[task_id]["progress"] = progress
            logger.info(f"OCR –∑–∞–¥–∞—á–∞ {task_id}: [{progress}%] {details}")

    try:
        processor = TextExtractionProcessor(status_callback=status_callback)
        result = processor.run()
        
        task_statuses[task_id].update({
            "status": "completed",
            "progress": 100,
            "details": "OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            "end_time": datetime.now().isoformat(),
            "result": result
        })
    except Exception as e:
        error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ OCR –∑–∞–¥–∞—á–µ: {str(e)}"
        logger.error(f"OCR ID –∑–∞–¥–∞—á–∏ {task_id}: {error_message}", exc_info=True)
        task_statuses[task_id].update({
            "status": "failed",
            "progress": 100,
            "details": error_message,
            "end_time": datetime.now().isoformat()
        })

def run_clustering_task(task_id: str):
    """–§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º."""
    logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏, ID: {task_id}")
    task_statuses[task_id].update({
        "status": "running",
        "progress": 0,
        "details": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...",
        "start_time": datetime.now().isoformat()
    })

    def status_callback(details: str, progress: int):
        """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏."""
        if task_id in task_statuses:
            task_statuses[task_id]["details"] = details
            task_statuses[task_id]["progress"] = progress
            logger.info(f"–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è {task_id}: [{progress}%] {details}")

    try:
        processor = ClusteringAnalysisProcessor(status_callback=status_callback)
        result = processor.run()
        
        task_statuses[task_id].update({
            "status": "completed",
            "progress": 100,
            "details": "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            "end_time": datetime.now().isoformat(),
            "result": result
        })
    except Exception as e:
        error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
        logger.error(f"–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è ID {task_id}: {error_message}", exc_info=True)
        task_statuses[task_id].update({
            "status": "failed",
            "progress": 100,
            "details": error_message,
            "end_time": datetime.now().isoformat()
        })


# === API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ===

@router.post("/scripts/screenshots", summary="üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º)", tags=["üîß Scripts Management"])
async def run_replay_screenshots_tracked(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    task_id = str(uuid.uuid4())
    task_statuses[task_id] = {
        "status": "queued", 
        "details": "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
        "start_time": datetime.now().isoformat()
    }
    
    background_tasks.add_task(run_screenshot_task, task_id)
    
    return {
        "message": "–ó–∞–¥–∞—á–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.",
        "task_id": task_id,
        "status_url": f"/api/task-status/{task_id}"
    }

@router.post("/scripts/collect-links", summary="üîó –°–±–æ—Ä —Å—Å—ã–ª–æ–∫", tags=["üîß Scripts Management"])
async def run_collect_links(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ —Å—Å—ã–ª–æ–∫ (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)."""
    # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–û–ï –ò–ú–Ø –§–ê–ô–õ–ê
    script_path = "scripts/collect_links.py"
    background_tasks.add_task(run_script_safe, script_path, "Collect Links")
    return {"message": "–°–∫—Ä–∏–ø—Ç 'Collect Links' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."}

@router.post("/scripts/extract-text", summary="üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ OCR", tags=["üîß Scripts Management"])
async def run_text_extraction_tracked(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç OCR –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Ä—Ö–∏–≤–æ–≤ –≤ —Ñ–æ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    task_id = str(uuid.uuid4())
    task_statuses[task_id] = {
        "status": "queued", 
        "details": "OCR –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
        "start_time": datetime.now().isoformat()
    }
    
    background_tasks.add_task(run_ocr_task, task_id)
    
    return {
        "message": "–ó–∞–¥–∞—á–∞ –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞ OCR –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.",
        "task_id": task_id,
        "status_url": f"/api/task-status/{task_id}"
    }

@router.post("/scripts/clustering", summary="üéØ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑", tags=["üîß Scripts Management"])
async def run_clustering_analysis_tracked(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    task_id = str(uuid.uuid4())
    task_statuses[task_id] = {
        "status": "queued", 
        "details": "–ó–∞–¥–∞—á–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
        "start_time": datetime.now().isoformat()
    }
    
    background_tasks.add_task(run_clustering_task, task_id)
    
    return {
        "message": "–ó–∞–¥–∞—á–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑—É –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.",
        "task_id": task_id,
        "status_url": f"/api/task-status/{task_id}"
    }