import pandas as pd
from google.cloud import bigquery
from google.oauth2 import service_account
from datetime import datetime, timedelta
import openai
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BQ_PROJECT = 'codellon-dwh'
BQ_DATASET = 'amplitude_session_replay'
BQ_TABLE = 'replay_text_complete'
CREDENTIALS_PATH = '/Users/avsimkin/PycharmProjects/session_replay_ai/venv/bigquery-credentials.json'
OPENAI_API_KEY = "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"
DATE_FOR_SUMMARY = (datetime.utcnow() - timedelta(days=1)).strftime('%Y-%m-%d')  # –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
credentials = service_account.Credentials.from_service_account_file(
    CREDENTIALS_PATH,
    scopes=["https://www.googleapis.com/auth/bigquery"]
)
bq_client = bigquery.Client(credentials=credentials, project=BQ_PROJECT)
openai.api_key = OPENAI_API_KEY

def load_data_for_summary(date_str):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ BigQuery –∑–∞ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É"""
    table_id = f"{BQ_PROJECT}.{BQ_DATASET}.{BQ_TABLE}"
    query = f"""
    SELECT user_id, country, session_length, device_type, session_replay_url, summary, sentiment, actions, cluster_description
    FROM `{table_id}`
    WHERE record_date = '{date_str}'
      AND summary IS NOT NULL AND summary != ''
    """
    df = bq_client.query(query).to_dataframe()
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–∞–º–º–∞—Ä–∏: {len(df)}")
    return df

def make_llm_input(df):
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—É–ª –¥–ª—è LLM"""
    rows = []
    for _, row in df.iterrows():
        rows.append(
            f"User: {row['user_id']}, Country: {row['country']}, Length: {row['session_length']}, "
            f"Device: {row['device_type']}, URL: {row['session_replay_url']}, "
            f"Summary: {row['summary']}, Sentiment: {row['sentiment']}, "
            f"Action: {row['actions']}, Cluster: {row['cluster_description']}"
        )
    return "\n".join(rows)

def make_prompt(all_summaries):
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç –¥–ª—è LLM"""
    prompt = f"""
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. 
–£ —Ç–µ–±—è –µ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Amplitude Session Replay, –≥–¥–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ –µ—Å—Ç—å:
- User ID
- –ì–µ–æ (—Å—Ç—Ä–∞–Ω–∞)
- –î–ª–∏–Ω–∞ —Å–µ—Å—Å–∏–∏
- –¢–∏–ø –¥–µ–≤–∞–π—Å–∞
- –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
- Summary (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
- Sentiment (—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: positive/negative/neutral)
- Action (—á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
- –ö–ª–∞—Å—Ç–µ—Ä (—Ç–µ–º–∞—Ç–∏–∫–∞ –∏–ª–∏ —Å—É—â–Ω–æ—Å—Ç—å: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –¥–µ–ø–æ–∑–∏—Ç, —Å—Ç–∞–≤–∫–∞ –∏ —Ç.–¥.)

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–¥—É–∫—Ç–∞.
–í —Å–∞–º–º–∞—Ä–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏:
1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å—Ç—Ä–∞–Ω—ã, —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–µ—Å—Å–∏–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–µ–≤–∞–π—Å–∞–º, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ sentiment)
2. –¢–æ–ø-3 –∫–ª–∞—Å—Ç–µ—Ä–∞ (–ø–∞—Ç—Ç–µ—Ä–Ω–∞) —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–µ—Å—Å–∏–π
3. Action ‚Äî –¢–û–ü-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞/—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
4. –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã / –±–∞–≥–∏ (—Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ user_id –∏–ª–∏ —Å—Å—ã–ª–æ–∫)

–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –∫–∞–∫ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Ç–µ–∫—Å—Ç –∏–∑ summary, –∞ –¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã –∏ –æ–±–æ–±—â–µ–Ω–∏—è.

–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
{all_summaries}
"""
    return prompt

def get_llm_summary(prompt):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º—Ç –≤ OpenAI –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏"""
    print("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI...")
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=1200,
        temperature=0.3
    )
    summary_text = response['choices'][0]['message']['content']
    print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–∞–º–º–∞—Ä–∏ –æ—Ç LLM")
    return summary_text

# (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack
def send_to_slack(summary_text, webhook_url):
    import requests
    resp = requests.post(webhook_url, json={"text": summary_text})
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Slack: {resp.status_code}")

def main():
    df = load_data_for_summary(DATE_FOR_SUMMARY)
    if df.empty:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
        return
    all_summaries = make_llm_input(df)
    prompt = make_prompt(all_summaries)
    summary_text = get_llm_summary(prompt)
    print("\n=== –°–ê–ú–ú–ê–†–ò ===\n")
    print(summary_text)
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Slack:
    # send_to_slack(summary_text, "https://hooks.slack.com/services/XXX/YYY/ZZZ")

if __name__ == "__main__":
    main()